## Tool to mix and rewrite a set of wave files based on a crash script.

import crack.audio.wavfile readWave, ManagedWaveBuffer, WaveBuffer, WaveDef;
import crack.cont.array Array;
import crack.cont.treemap TreeMap;
import crack.fs makePath;
import crack.io cerr, cout, SeekableReader, SeekableWriter, StandardFormatter,
    SEEK_END, SEEK_SET;
import crack.lang Exception;
import crack.sys argv;
import crash createRootContext, eval, Builtin, EvalContext, Obj;
import spug.loop.jack BYTES_PER_SAMPLE;
import spug.loop.plugins PluginInstance, PluginLibrary;
import spug.loop.plugincmds makeEffectObj;
import spug.loop.processors makeBufferVector, BufferVector, Component;
import types FloatObj, IntObj;

@import ann function;
@import crack.ann assert;

class TrackInfo {
    ## This can really only be a mono wave at this time.
    WaveDef wave;

    ## Source stream.
    SeekableReader src;

    ## Start of wave data.
    uint64 dataStart;

    ## -1 for far left, +1 for far right.
    float pan;

    ## 0 to 1.
    float volume = 1;

    ## Volume multiplier, greater than 0.
    float gain = 1;

    ## Start position of the data in the file.
    int64 __dataStart;

    ## Components pipeline.
    Component effects;

    oper init(String filename) {
        wave = readWave(src = makePath(filename).reader());
        __dataStart = src.tell();
        cerr `channels: $(wave.channels)\n`;

        # Verify that the frame count appears accurate.
        src.seek(0, SEEK_END);
        expectedCount :=
            (src.tell() - __dataStart) / (BYTES_PER_SAMPLE * wave.channels);
        if (expectedCount != wave.frameCount) {
            cerr I`bad frame count, expected $expectedCount, got \
                   $(wave.frameCount)\n`;
            wave.frameCount = expectedCount;
        }

        src.seek(int64(__dataStart), SEEK_SET);
    }

    WaveBuffer readBuffer(uint frames) {
        # TODO: support stereo waves.
        buf := ManagedWaveBuffer(frames);
        wave.read(src, buf);
        return buf;
    }

    ## Seek to a frame position.
    ## TODO: decide semantics when seeking past the end of a wave.
    void seek(uint pos) {
        src.seek(int64(__dataStart + (pos * BYTES_PER_SAMPLE * wave.channels)),
                 SEEK_SET
                 );
    }
}


## corresponds to the position in a set of files.
class RemixHead {

    ## Current frame position across all wave files.
    uint pos;

    ## If non-null, this is the file that we're writing to.  It must have two
    ## channels.
    SeekableWriter outFile;
    WaveDef outDef;

    ## Output frame count (should be zero if outFile/outDef are null).
    uint outFrameCount;

    Array[TrackInfo] trackInfo = {};

    ## Minimum and maximum amplitude written so far.
    float maxAmp, minAmp;

    ## If true, collect statistics.  If this is false and we're not writing an
    ## output file, forwardTo() just skips the data and does a seek.
    bool collectStats;

    # Two channel output buffer vector.
    BufferVector effectsOut = makeBufferVector(2);

    ## Load a wave file into the next channel.  Return the track index.
    int load(String filename) {
        trackInfo.append(TrackInfo(filename));
        return trackInfo.count() - 1;
    }

    ## Open a new output file.  Any existing file will be closed.
    void openOutput(String filename) {
        if (outDef)
            outDef.finish(outFile);
        outFile = makePath(filename).writer();
        outDef = WaveDef(2, trackInfo[0].wave.rate, 16);
        outDef.writeHeader(outFile);
        outFrameCount = 0;
    }

    @final void __mergeWithProcessing(Array[float] accum, TrackInfo track,
                                      int frames
                                      ) {

        # Fill the input buffers.
        inbufs := track.effects.getInputBuffers();
        buf := track.readBuffer(frames * track.wave.channels);
        for (int ch; ch < track.wave.channels && ch < inbufs.count(); ++ch) {
            for (int i = 0; i < frames; ++i) {
                inbufs[ch][i] = buf[i * track.wave.channels + ch] / 32768.0;
            }
        }

        # Run the effects chain.
        track.effects.run(frames);

        # Mix down from the final output buffers.
        for (int i = 0; i < frames; ++i) {
            float left, right;
            float sampleLeft = effectsOut[0][i];
            float sampleRight = effectsOut[1][i];
            # Very simple panning algorithm: if we're panning left, pan the
            # right channel into the left, if we're panning right pan the left
            # channel into the right.
            if (track.pan < 0) {
                left = (sampleLeft + sampleRight * -track.pan);
                right = sampleRight * (track.pan + 1);
            } else if (track.pan > 0) {
                left = sampleLeft * (1 - track.pan);
                right = (sampleRight + sampleLeft * track.pan);
            } else {
                left = sampleLeft;
                right = sampleRight;
            }

            left *= track.gain * track.volume;
            right *= track.gain * track.volume;

            accum[i * 2] = accum[i * 2] + left;
            accum[i * 2 + 1] = accum[i * 2 + 1] + right;
        }
    }

    @final void __mergeMonoTrack(Array[float] accum, TrackInfo track,
                                 int frames
                                 ) {
        buf := track.readBuffer(frames);

        for (int i = 0; i < buf.size; ++i) {
            float left, right;
            float sample = buf[i] / 32768.0;
            left = sample * track.volume * track.gain * ((1 - track.pan) / 2);
            right = sample * track.volume * track.gain * ((1 + track.pan) / 2);
            accum[i * 2] = accum[i * 2] + left;
            accum[i * 2 + 1] = accum[i * 2 + 1] + right;
        }
    }

    @final void __mergeStereoTrack(Array[float] accum, TrackInfo track,
                                   int frames
                                   ) {
        buf := track.readBuffer(frames * 2);

        for (int i = 0; i < buf.size / 2; ++i) {
            float left, right;
            float sampleLeft = buf[i * 2] / 32768.0;
            float sampleRight = buf[i * 2 + 1] / 32768.0;

            # Very simple panning algorithm: if we're panning left, pan the
            # right channel into the left, if we're panning right pan the left
            # channel into the right.
            if (track.pan < 0) {
                left = (sampleLeft + sampleRight * -track.pan);
                right = sampleRight * (track.pan + 1);
            } else if (track.pan > 0) {
                left = sampleLeft * (1 - track.pan);
                right = (sampleRight + sampleLeft * track.pan);
            } else {
                left = sampleLeft;
                right = sampleRight;
            }

            left *= track.gain * track.volume;
            right *= track.gain * track.volume;

            accum[i * 2] = accum[i * 2] + left;
            accum[i * 2 + 1] = accum[i * 2 + 1] + right;
        }
    }

    void __writeData(int frames) {
        # Accumulator buffer for us to mix all of the results into, size * 2
        # for stereo.
        accum := Array[float](frames * 2, 0);

        # Mix and pan all of the waves into the accumulator.
        for (track :in trackInfo) {
            if (track.effects)
                __mergeWithProcessing(accum, track, frames);
            else if (track.wave.channels == 2)
                __mergeStereoTrack(accum, track, frames);
            else
                __mergeMonoTrack(accum, track, frames);
        }

        # Create an output buffer.
        outBuf := ManagedWaveBuffer(frames * 2);
        for (sample :in accum) {
            # TODO: add compressor algorithm, don't just clip.
            if (sample > 1.0)
                sample = 1.0;
            else if (sample < -1.0)
                sample = -1.0;

            outBuf.append(int16(sample * 32767));

            # Update min/max amplitude.
            if (sample > maxAmp)
                maxAmp = sample;
            else if (sample < minAmp)
                minAmp = sample;
        }

        if (outDef)
            outDef.writeData(outFile, outBuf);
        outFrameCount += frames;
        pos += frames;
    }

    ## Mix and write 'frames' frames of data to the output file.
    void writeData(int frames) {
        while (frames > 0) {
            if (frames > 1024)
                __writeData(1024);
            else
                __writeData(frames);
            frames -= 1024;
        }
    }

    ## Move forward to the specified position, writing data along the way if
    ## necesssary.
    ## Fails with an assertion error if 'pos' is less than the current
    ## position.
    void forwardTo(int pos) {
        @assert(pos >= this.pos);
        if (outFile || collectStats)
            writeData(pos - this.pos);
        else {
            # Seek all of the tracks.
            for (track :in trackInfo)
                track.seek(pos);
        }
        this.pos = pos;
    }

    ## Set the volume for the track.
    void setVolume(int track, float volume) {
        trackInfo[track].volume = volume;
    }

    ## Set the gain for the track.
    void setGain(int track, float gain) {
        trackInfo[track].gain = gain;
    }

    ## Set the panning for the track. Value must be between -1 (far left) and
    ## 1 (far right).
    void setPan(int track, float pan) {
        @assert(pan >= -1.0 && pan <= 1.0);
        trackInfo[track].pan = pan;
    }

    ## Finish writing the current file from the remainder of all track data.
    void finish() {
        # Find the longest track.
        int frames;
        for (track :in trackInfo) {
            if (track.wave.frameCount > frames)
                frames = track.wave.frameCount;
        }

        cerr `forwarding to $frames\n`;
        forwardTo(frames);
        if (outDef)
            outDef.finish(outFile);
    }

    void closeFile() {
        outDef.finish(outFile);
    }
}

project := RemixHead();
plugins := PluginLibrary();

## Move forward to the specified position, writing to the output file if
## "outfile" has been called
@function int forward(int pos) {
    project.forwardTo(pos);
    return 0;
}

## Start a new output file.
@function int outfile(String filename) {
    project.openOutput(filename);
    return 0;
}

## Load 'filename' into the project.  Returns the new track index.
@function int load(String filename) {
    return project.load(filename);
}

## Set the panning for a given track index.
@function int pan(int track, float val) {
    project.setPan(track, val);
    return 0;
}

## Set the volume for a given track index.
@function int volume(int track, float val) {
    project.setVolume(track, val);
    return 0;
}

@function int gain(int track, float val) {
    project.setGain(track, val);
    return 0;
}

## Inserts a new effects plugin.
@function Obj insertEffect(int track, String name) {
    plugin := plugins.getPluginByName(name);
    if (!plugin)
        throw Exception('No plugin with the specified name');
    inst := plugin.makeInstance(project.trackInfo[0].wave.rate);
    trackObj := project.trackInfo[track];
    if (trackObj.effects)
        inst.append(trackObj.effects);
    else
        inst.setOutputBuffers(project.effectsOut);
    cerr I`output buffers are $(project.effectsOut.count()) \
           $(project.effectsOut[0].count()), $(project.effectsOut[1].count())`;
    trackObj.effects = inst;
    return makeEffectObj(inst);
}

## Close the file ("pen up").
@function int close() {
    project.closeFile();
    return 0;
}

@function int finish() {
    project.finish();
    return 0;
}

## Enable/disable statistics collection.
@function int collectStats(int enabled) {
    project.collectStats = enabled;
    return 0;
}

## Dump all stats to standard output.
@function int showStats() {
    cout `min amp: $(project.minAmp)\nmax amp: $(project.maxAmp)\n`;
    return 0;
}

## Alternate command set and datastructures to support scanning.
## Wrapping this up in a class for modularity.
##
## Scanning allows us to run through the set of commands and construct a set
## of commands for AWB to set the state to what it was at the end of a logfile.
class Scan {
    int pos;
    TreeMap[int, float] vols = {};
    TreeMap[int, float] pans = {};

    @function(Scan) int forward(int pos) {
        self.pos = pos;
        return 0;
    }

    @function(Scan) int outfile(String filename) {
        return 0;
    }

    @function(Scan) int load(String filename) {
        return 0;
    }

    @function(Scan) int pan(int track, float val) {
        self.pans[track] = val;
        return 0;
    }

    @function(Scan) int volume(int track, float val) {
        self.vols[track] = val;
        return 0;
    }

    @function(Scan) int gain(int track, float val) {
        return 0;
    }

    @function(Scan) int finish() {
        return 0;
    }

    @function(Scan) int close() {
        return 0;
    }

    @function(Scan) int collectStats(int enabled) {
        return 0;
    }

    @function(Scan) int showStats() {
        return 0;
    }

    void dump() {
        for (channel :in vols)
            cout `\$proj setVol $(channel.key) $(channel.val)\n`;

        for (channel :in pans)
            cout `\$proj setPan $(channel.key) $(channel.val)\n`;

        cout `seek $pos\n`;
    }
}

ctx := createRootContext();

if (argv[1] == 'mix') {

    ctx.define('forward', forward());
    ctx.define('outfile', outfile());
    ctx.define('load', load());
    ctx.define('pan', pan());
    ctx.define('volume', volume());
    ctx.define('gain', gain());
    ctx.define('insertEffect', insertEffect());
    ctx.define('finish', finish());
    ctx.define('close', close());
    ctx.define('collectStats', collectStats());
    ctx.define('showStats', showStats());

    eval(makePath(argv[2]).readAll(), ctx);

} else if (argv[1] == 'scan') {

    scan := Scan();

    ctx.define('forward', Scan.forward(scan));
    ctx.define('outfile', Scan.outfile(scan));
    ctx.define('load', Scan.load(scan));
    ctx.define('pan', Scan.pan(scan));
    ctx.define('volume', Scan.volume(scan));
    ctx.define('gain', Scan.gain(scan));
    ctx.define('finish', Scan.finish(scan));
    ctx.define('close', Scan.close(scan));
    ctx.define('collectStats', Scan.collectStats(scan));
    ctx.define('showStats', Scan.showStats(scan));

    # Define the "merk" command so we can handle raw output without having to
    # add output filenames first.
    ctx.define('mark', Scan.forward(scan));

    eval(makePath(argv[2]).readAll(), ctx);
    scan.dump();
} else if (argv[1] == 'new') {
    outfile := argv[2];
    outPath := makePath(outfile);
    out := StandardFormatter(outPath.writer());
    out I`\
        evalfile /home/mmuller/w/awb/awbconfig.crash
        var DIR $(outPath.parent().getFullName())
        var proj [[evtrec] Project \$DIR]

        `;

    for (iter :on argv.subarray(3))
        out `\$proj addTrack $(iter.elem()) $(iter.index + 8) $(iter.index)\n`;

    out I`\
        app bind 109 [callback {
            var pos [tell]
            print 'marking ' \$pos '\\n'
            \$proj writeLog [format 'mark ' \$pos '\\n']
        }]
        `;
} else {
    cerr I`Usage:
           $(argv[0]) mix <scriptfile>
              Run the script and do a mix-down.
           $(argv[0]) scan <scriptfile>
              Scan the script, emitting a set of commands to set AWB to the
              state at the end of the script.
           `;
}
