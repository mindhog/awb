# Standard configuration stuff.
import [collections] array map
import [stdlib] exists open

import [collections] map range

# Some bindings for the old UI (pretty much unused).

# bind '-' to 'bak'
app bind 45 [callback { bak }]

# bind '=' (under '+') to fwd
app bind 61 [callback { fwd }]

# Keeps track of the next track to be allocated with the "track" command.
var trackNum 0

# The current project.
var project 'project-not-defined'

var _internalChannelMapper [ChannelMapper 0]

# The input channel mapper.  Changes events with midi channel 1 (channel 0 at
# the wire level) to whatever channel is specified.
var inputChannelMapper [ChannelPredicate 0 $_internalChannelMapper]
[get_engine] addInputProcessor $inputChannelMapper

def setInputChannel {channel} \
    'Set the channel that midi events are mapped to.' {
    _internalChannelMapper setNewChannel $channel
}

def makeProject {} {
    var result [[evtrec] Project $scriptDir]

    # bind 'm' ("mark") to write the position.
    app bind 109 [callback {
        var pos [tell]
        print 'marking ' $pos '\n'
        $project writeLog [format 'mark ' $pos '\n']
    }]

    $result bindControllerScript 41 {
        print 'got control event\n'
        if {event value} {
            print 'playing'
            play
        }
        print 'done with control event\n'
    }

    makeProjectHook $result

    # Store in the project variable.
    set project $result

    give $result
}

# Default "track controller functions" -- see info below.
var tcf [object {
    def getVolCC {trackNum} {
        + [* $trackNum 256] 7
    }

    def getPanCC {trackNum} {
        + [* $trackNum 256] 10
    }
}]

def importer {symbols} \
    'Returns an import statement that imports "symbols" from the config
    script.' {

    format 'import [load_module /home/mmuller/w/awb/awbconfig.crash] ' \
        $symbols '\n'
}

def setTCF {newTCF} \
  'Set the track controller functions, an object with getVolCC(trackNum) and
   getPanCC(trackNum) methods that return the numeric controller ids for a
   given track number.

   Controller numbers correspond to midi_channel * 256 + midi_CC_code +
   controller_offset, where controller_offset is a parameter of the midi
   engine that can be set using ControllerOffsetChangeProcessor.  The offset
   allows controller bank switching (in which the controller number is
   itself modulated by a prior CC message) which seems to be a feature of some
   controllers.  See makeControllerOffsetChange for details.

   The default TCF set assumes that the track maps to the midi channel and
   that the volume and pan controllers are just the normal controllers for
   those parameters (7, and 10, respectively).

   setTCF <tcf-object>' {
    set tcf $newTCF
}

var makeProjectHook [def defaultHook {project} {}]

def setMakeProjectHook {func} \
    'Set the function to be called when a new project is created using
    makeProject.  The function will be called with the new project as its only
    argument.' {
    set makeProjectHook $func
}

## Stores information for interacting with a plugin.
##
## _name: String
## _uiFactory: A function accepting
def Plugin {_name _uiFactory} \
    'Stores information for interacting with a plugin.

    _name: String.  Name of the plugin.
    _uiFactory:
        function {parent:Window onTerminate:function{} name:String} : Window
        A function that creates a new UI for the plugin.  "parent" is the
        parent window, "onTerminate" is a function that the UI must call when
        it is exited (with F3), and "name" is the name of the track/channel
        that the plugin is attached to.
    ' {
    object {
        def name {} {
            give $_name
        }

        def uiFactory {} {
            give $_uiFactory
        }
    }
}

## Launches a new model window to edit a midi track in the tracker.
##
## parent: TrackList
## onTerminate: called when the terminate key (F3) is pressed.
## track: TrackObj
def editInTracker {parent onTerminate track index} {
    var result [Tracker $parent [track clone]]
    result bind $KEY_PGUP { result pageUp }
    result bind $KEY_PGDN { result pageDown }
    result bind $KEY_DOWN { result down }
    result bind $KEY_UP { result up }
    result bind $KEY_F3 { onTerminate }

    # '[' Crunches the current track.
    result bind 91 {
        var eng [get_engine]
        var newTrack [
            [result getTrack] crunch [
                [eng getCurrentSection] getMeasureSize
            ]
        ]
        result setTrack $newTrack
        eng replaceTrack $index [newTrack clone]
    }

    result setFocus 1
    give $result
}

var audioPlugins [array]
var midiPlugins [array [Plugin 'Edit in Tracker' $editInTracker]]

# Adds a new track.
def track {file} 'Add a new track file: track <filename>' {
    $project addTrack $file [tcf getVolCC $trackNum] [tcf getPanCC $trackNum]
    set trackNum [+ $trackNum 1]
}

def trackwm {model name loader} 'Add a WaveModel track.' {
    $project addWaveModel $model $name $loader [tcf getVolCC $trackNum] \
        [tcf getPanCC $trackNum]
    set trackNum [+ $trackNum 1]
}

def midiTrack {file} 'Add a new midi track: midiTrack <file>' {
    prerr [format 'loading midi file ' $file '\n']
    var eng [getAWBEngine]
    eng loadMidiFile $file

    # Get the last track, which will be the last midi track loaded from the
    # file.  Since a midi file can contain multiple tracks, this won't capture
    # the other tracks in the file.  However, these also won't have track info
    # entries, so the whole thing is already kind of broken.
    var track [[getTracks] last]
    var trackIndex [- [[getTracks] count] 1]

}

## Adds a new "bus" (pass-through).  Argument is an array of one or two input
## ports (e.g. left_in, right_in).
def bus {inputs} {
    $project addPassThrough $inputs [tcf getVolCC $trackNum] \
        [tcf getPanCC $trackNum]
    set trackNum [+ $trackNum 1]
}


def pan {track val} {
    $project setPan $track $val
}

def getPan {track} {
    $project getPan $track
}

def vol {track val} {
    $project setVol $track $val
}

def getVol {track} {
    project getVol $track
}

def gain {track val} {
    $project setGain $track $val
}

def getGain {track} {
    $project getGain $track
}

var MidiRecorder [object {
    var eng [get_engine]
    var active [+ 0]
    var recorder ''

    def activate {} {
        set recorder [makeMidiTrackRecorder]
        eng addRecorder $recorder
        set active [+ 1]
    }

    def deactivate {} {
        eng removeRecorder $recorder
        set active [+ 0]
    }

    def isEnabled {} {
        give $active
    }
}]

def or {a b} {
    if {give $a} {
        give true
    } elif {give $b} {
        give true
    } else {
        give ''
    }
}

## Return an audio track filename stem that doesn't already exist in the current
## directory.  This just uses a stem of "track" followed by the first integer
## value for which no .crash or .wav file exists, e.g. "track1" if that
## doesn't exist, then track2 and so on
def findUniqueAudioTrack {} {
    var i 1
    while {or [exists [format 'track' $i '.crash']] \
              [exists [format 'track' $i '.wav']]} {
        set i [+ $i 1]
    }
    format 'track' $i
}

var AudioRecorder [object {
    var trackName [findUniqueAudioTrack]
    var enabled [+ 0]
    var monitorEnabled true
    var eng [get_engine]
    var channels $STEREO
    var control ''
    var recorder ''

    var lastTrackName ''

    def addRecorder {} {
        prerr [format 'adding recorder for ' $channels '\n']
        # Preserve the current filename for the callback.
        set recorder [makeAudioFileRecorder [format $trackName '.wav'] \
                                            $channels]
        recorder enableMonitor $monitorEnabled
        recorder setCloseCallback [callback {
            var tn $trackName
            # We have to recalculate this
            var fn [format $trackName '.wav']
            prerr [format 'start pos is ' [recorder startPos] '\n']
            var pos [recorder startPos]
            if {== $pos [+ 0]} {
                track $fn
            } else {
                # Non-zero aligned track.
                # Write a crash file that builds a sequencer wave object and
                # then just evaluate it to add the new model to the current
                # system.
                var crashfile [format $tn '.crash']
                var out [open $crashfile w]
                out write [importer 'trackwm']
                out write 'var t [makeSequencerWaveModel]\n'
                out write [format 't add ' $pos ' [readWave ' $fn ']\n']
                var ti [[getTracks] count]
                var logfileLoader [
                    format 'seq\\nadd_wave ' $ti ' ' $pos ' ' $tn '.wav\\n'
                ]
                out write [
                    format 'trackwm $t ' $tn ' \'' $logfileLoader '\'\n'
                ]
                set out null

                evalfile $crashfile
            }

            # Fix the recording name.
            set lastTrackName $trackName
            set trackName [findUniqueAudioTrack]
            if {give $control} {
                control setText $trackName
            }
            recorder setFilename [format $trackName '.wav']
        }]
        eng addRecorder $recorder
    }

    def activate {} {
        set enabled [+ 1]
        addRecorder
    }

    def deactivate {} {
        set enabled [+ 0]
        eng removeRecorder $recorder
    }

    def isEnabled {} { give $enabled }

    ## Returns a model object (suitable for use with a ToggleButton) for
    ## enabling/disabling monitoring during record.
    def getMonitorModel {} {
        object {
            def activate {} {
                set monitorEnabled true
                if {give $recorder} {
                    recorder enableMonitor true
                }
            }

            def deactivate {} {
                set monitorEnabled false
                if {give $recorder} {
                    recorder enableMonitor false
                }
            }

            def isEnabled {} {
                == $monitorEnabled true
            }
        }
    }

    def setTrackName {newTrackName} {
        set trackName $newTrackName
        if {give $enabled} {
            recorder setFilename [format $trackName '.wav']
        }

        if {give $control} {
            control setText $newTrackName
        }
    }

    def getTrackName {} {
        give $trackName
    }

    def setChannels {ch} \
        'Set the record channels.

         recorder setChannels <ch>
            <ch> is an integer bitmap.  Use the constants $LEFT, $RIGHT and
            $STEREO to record from the left, right and both channels,
            respectively.
        ' {
        set channels $ch
    }

    def setControl {newControl} {
        set control $newControl
    }

    ## Redo the last recording from the beginning.
    def redo {} {
        setTrackName $lastTrackName
        [get_engine] deleteTrack [- [[getTracks] count] 1]
        seek 0
    }
}]

def ToggleButton {parent size text model} \
    'Stateful text button that allows you to toggle the state of a model
    object.

    "model" must support "activate", "deactivate" and "isEnabled" methods.

    usage: MidiState <parent> <size> <text> <recorder>
    ' \
{
    object {
        var active [+ 0]
        var win [StatefulText $parent $size $text]
        win bind $KEY_ENTER {
            if {give $active} {
                win setNormalAttr 66
                win setUnfocusedAttr 2
                set active [+ 0]
                model deactivate
            } else {
                activate
            }

            give 'true'
        }

        def activate {} {
            win setNormalAttr 65
            win setUnfocusedAttr 1
            set active [+ 1]
            model activate
        }

        if {model isEnabled} {
            win setNormalAttr 65
            win setUnfocusedAttr 1
            set active [+ 1]
        } else {
            win setNormalAttr 66
            win setUnfocusedAttr 2
        }
    }
}

def ActionButton {parent size text action} \
    'Stateful text button that performs an action.

    "action" is a command object that takes no arguments.

    usage: ActionButton <parent> <size> <text> <action>
    ' \
{
    var self [
        object {
            var win [StatefulText $parent $size $text]
            win bind $KEY_ENTER {
                action
            }

            def setText {text} {
                win setText $text
            }

            def getWindow {} {
                give $win
            }

            def setFocus {focus} {
                win setFocus $focus
            }

            win setNormalAttr 71
            win setUnfocusedAttr 2
        }
    ]
}

## Display an entry bar in the given "parent" window.
##
## Call "enterCallback" with the entry text and restore the original parcel
## when the user presses "enter".
##
## "restoreFocus" is a widget to restore focus to.
def EntryBar {parent size label enterCallback restoreFocus} {
    object {
        var row [Row $parent $size]
        var label [StatefulText $row 10 $label]
        var entry [Entry $row -1]
        var lastParcel [parent getParcel]
        parent setParcel $row
        entry setFocus [+ 1]
        entry bind $KEY_ENTER {
            enterCallback [entry getText]
            parent setParcel $lastParcel
            restoreFocus setFocus [+ 1]
        }
    }
}

## Start a new menu.
##
## 'parent' is the container in which to place the menu (should be a Frame)
## and 'alternate' is the Window that we restore the parcel to after the menu
## goes away.  'lastFocus' is the Window that we return the focus to (should
## provide the "setFocus" method).
def makeMenu {parent alternate lastFocus} {
    var menu [List $parent -1]
    parent setParcel $menu
    menu setFocus 1
    var result [object {
        var actions [array]
        def add {text block} {
            menu add $text
            actions append $block
        }

        def selected {} {
            var action [actions get [menu getSelection]]

            # Clean up the menu, restore focus to the originator.
            parent setParcel $alternate
            lastFocus setFocus 1

            # Do the menu item action.
            $action
            give true
        }
    }]
    menu bind $KEY_ENTER { result selected }

    give $result
}

def StereoSource {name left right} {
    var self [object {
        # Alias the connect/disconnect functions so we can override and
        # delegate.
        var con $connect
        var dis $disconnect

        def connect {} 'connect the source to AWB input' {
            prerr [format 'calling connect ' $left ' and ' $right '\n']
            con $left 'awb:left_in'
            con $right 'awb:right_in'
            AudioRecorder setChannels $STEREO
        }

        def disconnect {} 'disconnect the source from AWB input' {
            dis $left 'awb:left_in'
            dis $right 'awb:right_in'
        }

        def getName {} { give $name }
        def makeAction {textWidget} {
            def action {} {
                RecordSourceManager connect $self
                textWidget setText $name
            }
        }
    }]
}

## A MonoSource is specified with a name, a jack source port and an input
## channel ("left" or "right").
def MonoSource {name source channel} {
    var self [object {
        # Alias the connect/disconnect functions so we can override and
        # delegate.
        var con $connect
        var dis $disconnect

        def connect {} 'connect the source to AWB input' {
            con $source [format 'awb:' $channel '_in']
            AudioRecorder setChannels [
                [map left $LEFT right $RIGHT] get $channel
            ]
        }

        def disconnect {} 'disconnect the source from AWB input' {
            dis $source [format 'awb:' $channel '_in']
        }

        def getName {} { give $name }
        def makeAction {textWidget} {
            def action {} {
                RecordSourceManager connect $self
                textWidget setText $name
            }
        }
    }]
}

var NullAudioSource [
    var self [object {
        def connect {} {}
        def disconnect {} {}
        def getName {} { give 'null' }
        def makeAction {textWidget} {
            def action {} {
                RecordSourceManager connect $self
                textWidget setText 'null'
            }
        }
    }]
]

var RecordSourceManager [
    object {
        # Currently connected audio source.
        var cur $NullAudioSource

        ## Connect an audio source to the AWB recording inputs.
        ##
        ## source: AudioSource instance.
        def connect {source} {
            if {give $cur} {
                cur disconnect
            }
            source connect
            set cur $source
        }

        ## Returns the name of the current audio source.
        def getCurrentName {} { cur getName }
    }
]

# Audio sources.  Add your local sources to this array in your .awb.crash file.
# Example:
#   import [load_module awbconfig.crash] sources MonoSource StereoSource
#   sources add [StereoSource 'zyn' 'zynaddsubfx:out_1' 'system:capture_2']
#   sources add [MonoSource 'System Left' 'zynaddsubfx:out_1' left]
var sources [
    array \
        $NullAudioSource \
        [StereoSource 'sys' 'system:capture_1' 'system:capture_2']
]

# Show the menu of audio sources for audio recording.
def showAudioSourceMenu {parent alternate textWidget} {
    var menu [makeMenu $parent $alternate $textWidget]
    [sources iter] each source {
        menu add [source getName] [source makeAction $textWidget]
    }
}

var projectBasename 'project-auto'
var projectFilename [format $projectBasename '.crash']
var midiOutChannel [+ 0]

## Save the current project.
def saveProject {} {
    # Export all of the midi tracks to midi files.
    var i 0
    var out [open $projectFilename w]
    out write [importer 'makeProject track vol pan gain midiTrack']
    out write 'var project [makeProject]\n'
    [getTracks] each track {
        if {track isMidi} {
            exportMidiFile [format [track getName] '.mid'] $i
            out write [format 'midiTrack ' [track getName] '.mid\n']
        } else {
            out write [format 'track ' [track getName] '\n']
        }
        set i [+ $i 1]
    }
    out write [format 'evalfile ' $projectBasename '-settings.crash\n']

    set out [open [format $projectBasename '-settings.crash'] w]
    set i [+ 0]
    [getTracks] each track {
        if {track isMidi} {
        } else {
            out write [format 'vol ' $i ' ' [getVol $i] '\n']
            out write [format 'pan ' $i ' ' [getPan $i] '\n']
            set i [+ $i 1]
        }
    }
}

var _audioSource ''

## Sets the audio source to the named menu item.
##
## This currently only works when called outside of visual mode.
def setAudioSource {sourceItemName} {
    set _audioSource $sourceItemName
}

var _controlPanel undefined
def getControlPanel {} {
    give $_controlPanel
}

def v {} 'Bring up the text panel UI.' {

    # Override builtin play, which still just starts the event manager.
    def play {} {
        [getAWBEngine] togglePlay
    }

    runUI {

        def setAudioFilename {} {
            def callback {text} {
                audioFilenameActionButton setText $text
                AudioRecorder setTrackName $text
            }
            EntryBar $bottomBar 1 'Audio Record Filename:' $callback \
                $audioFilenameActionButton
        }

        var midiRecordingName 'midi-recording'
        [get_engine] setMidiRecordTrackName $midiRecordingName
        def setMidiRecordingName {} {
            def callback {text} {
                midiTrackNameActionButton setText $text
                set midiRecordingName $text
                [get_engine] setMidiRecordTrackName $midiRecordingName
            }
            EntryBar $bottomBar 1 'Midi Record Track name:' $callback \
                $midiTrackNameActionButton
        }

        def setMidiOutChannel {} {
            def callback {text} {
                var newChannel [format [+ $text]]
                if {== $newChannel '0.000000'} {
                    # Need to report an error here.
                    return
                } else {
                    midiOutChannelActionButton setText $text
                    setInputChannel $newChannel
                }
            }
            EntryBar $bottomBar 1 'Midi out channel:' $callback \
                $midiOutChannelActionButton
        }

        def setMidiOutChannel {} {
            def callback {text} {
                var newChannel [format [+ $text]]
                if {== $newChannel '0.000000'} {
                    # Need to report an error here.
                    return
                } else {
                    midiOutChannelActionButton setText $text
                    [getAWBEngine] setInputChannel $newChannel
                }
            }
            EntryBar $bottomBar 1 'Midi out channel:' $callback $tracklist
        }

        # Create a row of buttons to control midi/audio recording.
        var stateRow [Row $mainColumn 1]
        ToggleButton $stateRow 5 'Midi' $MidiRecorder
        var midiTrackNameActionButton [
            ActionButton $stateRow 16 $midiRecordingName $setMidiRecordingName
        ]
        var midiOutChannelActionButton [
            ActionButton $stateRow 4 [format $midiOutChannel] $setMidiOutChannel
        ]
        var audioRecordBtn [ToggleButton $stateRow 6 'Audio' $AudioRecorder]
        var audioSourceButton [
            ActionButton $stateRow 8 [RecordSourceManager getCurrentName] [
                def showMenu {} {
                    showAudioSourceMenu $centerPane $tracklist \
                        $audioSourceButton
                }
            ]
        ]

        # If the project script defined the audio source, set it now.
        if {give $_audioSource} {
            [sources iter] each source {
                if {== [source getName] $_audioSource} {
                    [source makeAction $audioSourceButton]
                }
            }
        }

        var audioFilenameActionButton [
            ActionButton $stateRow 16 [AudioRecorder getTrackName] \
                $setAudioFilename
        ]
        AudioRecorder setControl $audioFilenameActionButton

        var monitorEnabledButton [
            ToggleButton $stateRow 4 'Mon' [AudioRecorder getMonitorModel]
        ]

        var centerPane [Frame $mainColumn -1]

        def makeModalUIInvoker {plugin track index} \
            'makeModalUIInvoker(plugin: Plugin, track: TrackObj) : Callable
             Return a function that invokes the UI.' {

            def onTerminate {} {
                centerPane setParcel $tracklist
                tracklist setFocus [+ 1]
            }

            def invoke {} {
                var win [plugin uiFactory | $centerPane $onTerminate $track \
                                            $index]
                centerPane setParcel $win
            }
        }

        var tracklist [TrackList $centerPane -1]
        def renameTrack {} {
            def callback {text} {
                var eng [get_engine]
                var section [eng getCurrentSection]
                var sel [tracklist getSelection]
                var track [section getTrack $sel]
                eng replaceTrack $sel [track rename $text]
            }
            EntryBar $bottomBar 1 'New name:' $callback $tracklist
        }
        tracklist bind $KEY_ENTER {
            var menu [makeMenu $centerPane $tracklist $tracklist]
            menu add 'Rename track' $renameTrack
            menu add 'Do something else' [def f {} { prerr 'something else' }]
            var trackIndex [tracklist getSelection]
            var track [arrayOf [getTracks] | get $trackIndex]
            var plugins [
                if {track isMidi} {
                    give $midiPlugins
                } else {
                    give $audioPlugins
                }
            ]
            plugins iter | each plugin {
                menu add [plugin name] [
                    makeModalUIInvoker $plugin $track $trackIndex
                ]
            }
            give true
        }
        tracklist bind $KEY_DEL {
            [get_engine] deleteTrack [self getSelection]
            give true
        }
        tracklist bind $KEY_UP {
            tracklist selectUp
            give true
        }
        tracklist bind $KEY_DOWN {
            tracklist selectDown
            give true
        }
        centerPane setParcel $tracklist

        bind $KEY_SPACE play
        bind $KEY_LEFT bak
        bind $KEY_RIGHT fwd
        bind $KEY_F2 saveProject
        bind $KEY_F5 {[get_engine] resetPos}

        # Lower-case "r" to record.
        bind 114 {[get_engine] toggleRecord}

        # Upper-case "R" to record over the last track.
        bind 82 {AudioRecorder redo}

        setStatusText 'AWB -- <Space> toggle play, <q> to quit, <Left> back, <Right> Forward'

        var bottomBar [Frame $mainColumn 1]
        var timeBar [TimeBar $mainColumn 1 [getAWBEngine]]
        bottomBar setParcel $timeBar
    }
}

def mark {} {
    var pos [tell]
    print 'marking ' $pos '\n'
    $project writeLog [format 'mark ' $pos '\n']
}

# Bindings for Korg Nanokontrol (channel,controller):
# << - 0,43
# >> - 0,44
# Stop - 0,42
# Play - 0,41
# Record - 0,45
# Track < - 0,58
# Track > - 0,59
