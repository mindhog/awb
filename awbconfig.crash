# Standard configuration stuff.

# bind '-' to 'bak'
app bind 45 [callback { bak }]

# bind '=' (under '+') to fwd
app bind 61 [callback { fwd }]

connect fluidsynth:left system:playback_1
connect fluidsynth:right system:playback_2
connect awb:left system:playback_1
connect awb:right system:playback_2

# Connect a midi device to AWB's midi input (this depends on selected midi
# device numbers and therefore sucks).
#shell aconnect 28:0 128:0
if {== $UI_MODE text} {
    connect 'midi:nanoKONTROL2/nanoKONTROL2 MIDI 1'  'midi:AWBX/in'
} else {
    connect 'midi:nanoKONTROL2/nanoKONTROL2 MIDI 1'  'midi:AWB/in'
}

# 899833 stray_mark
# 2181881 101_brain_damaged.wav

# Keeps track of the next track to be allocated with the "track" command.
var trackNum 0

def makeProject {} {
    var result [[evtrec] Project $scriptDir]

    # bind 'm' ("mark") to write the position.
    app bind 109 [callback {
        var pos [tell]
        print 'marking ' $pos '\n'
        $project writeLog [format 'mark ' $pos '\n']
    }]

    $result bindControllerScript 41 {
        print 'got control event\n'
        if {event value} {
            print 'playing'
            play
        }
        print 'done with control event\n'
    }

    give $result
}

# Adds a new track.
def track {file} {
    var volCC [+ [* 256 $trackNum] $trackNum]
    var panCC [+ $volCC 16]
    $project addTrack $file $volCC $panCC
    set trackNum [+ $trackNum 1]
}

# Adds a new "bus" (pass-through).
def bus {inputs} {
    var volCC [+ [* 256 $trackNum] $trackNum]
    var panCC [+ $volCC 16]
    $project addPassThrough $inputs $volCC $panCC
    set trackNum [+ $trackNum 1]
}


def pan {track val} {
    $project setPan $track $val
}

def getPan {track} {
    $project getPan $track
}

def vol {track val} {
    $project setVol $track $val
}

def getVol {track} {
    $project getVol $track
}

def gain {track val} {
    $project setGain $track $val
}

def getGain {track} {
    $project getGain $track
}

def MidiState {parent size} {
    object {
        var active [+ 0]
        var win [StatefulText $parent $size 'Midi']
        var eng [get_engine]
        win bind $KEY_ENTER {
            if {give $active} {
                win setNormalAttr 130
                win setUnfocusedAttr 2
                set active [+ 0]
                eng clearRecorders
            } else {
                self setNormalAttr 129
                self setUnfocusedAttr 1
                set active [+ 1]
                eng addRecorder [makeMidiTrackRecorder]
            }

            give 'true'
        }

        win setNormalAttr 130
        win setUnfocusedAttr 2
    }
}

def v {} 'Bring up the text panel UI.' {

    # Override builtin play, which still just starts the event manager.
    def play {} {
        [getAWBEngine] togglePlay
    }

    runUI {
        MidiState $mainColumn 1

        var tracklist [TrackList $mainColumn -1]
        tracklist bind $KEY_ENTER {
            prerr [format 'selection is ' [self getSelection]]
            give ''
        }

        bind $KEY_SPACE play
        bind $KEY_LEFT bak
        bind $KEY_RIGHT fwd

        # Lower-case "r" to record.
        bind 114 {[get_engine] record}

        setStatusText 'AWB -- <Space> toggle play, <q> to quit, <Left> back, <Right> Forward'
        TimeBar $mainColumn 1 [getAWBEngine]
    }
}

# Bindings for Korg Nanokontrol (channel,controller):
# << - 0,43
# >> - 0,44
# Stop - 0,42
# Play - 0,41
# Record - 0,45
# Track < - 0,58
# Track > - 0,59
