# Standard configuration stuff.

# bind '-' to 'bak'
app bind 45 [callback { bak }]

# bind '=' (under '+') to fwd
app bind 61 [callback { fwd }]

connect fluidsynth:left system:playback_1
connect fluidsynth:right system:playback_2
connect awb:left system:playback_1
connect awb:right system:playback_2

# Connect a midi device to AWB's midi input (this depends on selected midi
# device numbers and therefore sucks).
#shell aconnect 28:0 128:0
if {== $UI_MODE text} {
    connect 'midi:nanoKONTROL2/nanoKONTROL2 MIDI 1'  'midi:AWBX/in'
} else {
    connect 'midi:nanoKONTROL2/nanoKONTROL2 MIDI 1'  'midi:AWB/in'
}

# 899833 stray_mark
# 2181881 101_brain_damaged.wav

# Keeps track of the next track to be allocated with the "track" command.
var trackNum 0

def makeProject {} {
    var result [[evtrec] Project $scriptDir]

    # bind 'm' ("mark") to write the position.
    app bind 109 [callback {
        var pos [tell]
        print 'marking ' $pos '\n'
        $project writeLog [format 'mark ' $pos '\n']
    }]

    $result bindControllerScript 41 {
        print 'got control event\n'
        if {event value} {
            print 'playing'
            play
        }
        print 'done with control event\n'
    }

    give $result
}

# For Nano.  Channel and CC are both track number for volume, pan is the
# volume CC + 16.
#def getVolCC {} { + [* 256 $trackNum] $trackNum }
#def getPanCC {} { + [getVolCC] 16 }

# For Nektar.  Channel 15 * 256 + 12 for volume, channel 15 * 256 + 30 for pan.
def getVolCC {} { + 3852 $trackNum }
def getPanCC {} { + 3870 $trackNum }


# Adds a new track.
def track {file} {
    $project addTrack $file [getVolCC] [getPanCC]
    set trackNum [+ $trackNum 1]
}

def midiTrack {file} 'Add a new midi track: midiTrack <file>' {
    prerr [format 'loading midi file ' $file '\n']
    [getAWBEngine] loadMidiFile $file
}

# Adds a new "bus" (pass-through).
def bus {inputs} {
    $project addPassThrough $inputs [getVolCC] [getPanCC]
    set trackNum [+ $trackNum 1]
}


def pan {track val} {
    $project setPan $track $val
}

def getPan {track} {
    $project getPan $track
}

def vol {track val} {
    $project setVol $track $val
}

def getVol {track} {
    $project getVol $track
}

def gain {track val} {
    $project setGain $track $val
}

def getGain {track} {
    $project getGain $track
}

var MidiRecorder [object {
    var eng [get_engine]

    def activate {} {
        eng addRecorder [makeMidiTrackRecorder]
    }

    def deactivate {} {
        eng clearRecorders
    }
}]

var AudioRecorder [object {
    var filename 'recording.wav'
    var enabled [+ 0]
    var eng [get_engine]

    def addRecorder {} {
        eng addRecorder [makeAudioFileRecorder $filename]
    }

    def activate {} {
        set enabled [+ 1]
        addRecorder
    }

    def deactivate {} {
        set enabled [+ 0]
        eng clearRecorders
    }

    def setFilename {newFilename} {
        set filename $newFilename
        if {give $enabled} {
            # Replace the existing recorder.
            eng clearRecorders
            addRecorder
        }
    }

    def getFilename {} {
        give $filename
    }
}]

def ToggleButton {parent size text model} \
    'Stateful text button that allows you to toggle the state of a model
    object.

    "model" must support "activate" and "deactivate" methods.

    usage: MidiState <parent> <size> <text> <recorder>
    ' \
{
    object {
        var active [+ 0]
        var win [StatefulText $parent $size $text]
        win bind $KEY_ENTER {
            if {give $active} {
                win setNormalAttr 66
                win setUnfocusedAttr 2
                set active [+ 0]
                model deactivate
            } else {
                self setNormalAttr 65
                self setUnfocusedAttr 1
                set active [+ 1]
                model activate
            }

            give 'true'
        }

        win setNormalAttr 66
        win setUnfocusedAttr 2
    }
}

def ActionButton {parent size text action} \
    'Stateful text button that performs an action.

    "action" is a command object that takes no arguments.

    usage: ActionButton <parent> <size> <text> <action>
    ' \
{
    var self [
        object {
            var win [StatefulText $parent $size $text]
            win bind $KEY_ENTER {
                action
            }

            def setText {text} {
                win setText $text
            }

            win setNormalAttr 71
            win setUnfocusedAttr 2
        }
    ]
}

## Display an entry bar in the given "parent" window.
##
## Call "enterCallback" with the entry text and restore the original parcel
## when the user presses "enter".
##
## "restoreFocus" is a widget to restore focus to.
def EntryBar {parent size label enterCallback restoreFocus} {
    object {
        var row [Row $parent $size]
        var label [StatefulText $row 10 $label]
        var entry [Entry $row -1]
        var lastParcel [parent getParcel]
        parent setParcel $row
        entry setFocus [+ 1]
        entry bind $KEY_ENTER {
            enterCallback [entry getText]
            parent setParcel $lastParcel
            restoreFocus setFocus [+ 1]
        }
    }
}

## Start a new menu.
##
## 'parent' is the container in which to place the menu (should be a Frame)
## and 'alternate' is the Window that we restore the focus to after the menu
## goes away (should provide the "setFocus" method).
def makeMenu {parent alternate} {
    var menu [List $parent -1]
    parent setParcel $menu
    menu setFocus 1
    var result [object {
        var actions [array]
        def add {text block} {
            menu add $text
            actions append $block
        }

        def selected {} {
            var action [actions get [menu getSelection]]

            # Clean up the menu, restore focus to the originator.
            parent setParcel $alternate
            alternate setFocus 1

            # Do the menu item action.
            $action
            give true
        }
    }]
    menu bind $KEY_ENTER { result selected }

    give $result
}

var projectFilename 'project.crash'

## Save the current project.
def saveProject {} {
    # Export all of the midi tracks to midi files.
    var i [+ 0]
    var out [open $projectFilename w]
    out write 'import [evalfile /home/mmuller/w/awb/awbconfig.crash] '
    out write 'makeProject track vol pan gain midiTrack\n'
    out write 'var project [makeProject]\n'
    [getTracks] each track {
        if {track isMidi} {
            exportMidiFile [format [track getName] '.mid'] 0
            out write [format 'midiTrack ' [track getName] '.mid\n']
        } else {
            out write [format 'track ' [track getName] '\n']
        }
    }
}

def v {} 'Bring up the text panel UI.' {

    # Override builtin play, which still just starts the event manager.
    def play {} {
        [getAWBEngine] togglePlay
    }

    runUI {

        def setAudioFilename {} {
            def callback {text} {
                audioFilenameActionButton setText $text
                AudioRecorder setFilename [format $text '.wav']
            }
            EntryBar $bottomBar 1 'Audio Record Filename:' $callback $tracklist
        }

        var midiRecordingName 'midi-recording'
        [get_engine] setMidiRecordTrackName $midiRecordingName
        def setMidiRecordingName {} {
            def callback {text} {
                midiTrackNameActionButton setText $text
                set midiRecordingName $text
                [get_engine] setMidiRecordTrackName $midiRecordingName
            }
            EntryBar $bottomBar 1 'Midi Record Track name:' $callback \
                $tracklist
        }

        # Create a row of buttons to control midi/audio recording.
        var stateRow [Row $mainColumn 1]
        ToggleButton $stateRow 5 'Midi' $MidiRecorder
        var midiTrackNameActionButton [
            ActionButton $stateRow 16 $midiRecordingName $setMidiRecordingName
        ]
        ToggleButton $stateRow 6 'Audio' $AudioRecorder
        var audioFilenameActionButton [
            ActionButton $stateRow 16 'recording' $setAudioFilename
        ]

        var centerPane [Frame $mainColumn -1]

        var tracklist [TrackList $centerPane -1]
        def renameTrack {} {
            def callback {text} {
                var eng [get_engine]
                var section [eng getCurrentSection]
                var sel [tracklist getSelection]
                var track [section getTrack $sel]
                eng replaceTrack $sel [track rename $text]
            }
            EntryBar $bottomBar 1 'New name:' $callback $tracklist
        }
        tracklist bind $KEY_ENTER {
            var menu [makeMenu $centerPane $tracklist]
            menu add 'Rename track' $renameTrack
            menu add 'Do something else' [def f {} { prerr 'something else' }]
            give true
        }
        tracklist bind $KEY_DEL {
            [get_engine] deleteTrack [self getSelection]
            give true
        }
        centerPane setParcel $tracklist

        bind $KEY_SPACE play
        bind $KEY_LEFT bak
        bind $KEY_RIGHT fwd
        bind $KEY_F2 saveProject

        # Lower-case "r" to record.
        bind 114 {[get_engine] toggleRecord}

        setStatusText 'AWB -- <Space> toggle play, <q> to quit, <Left> back, <Right> Forward'

        var bottomBar [Frame $mainColumn 1]
        var timeBar [TimeBar $mainColumn 1 [getAWBEngine]]
        bottomBar setParcel $timeBar
    }
}

# Bindings for Korg Nanokontrol (channel,controller):
# << - 0,43
# >> - 0,44
# Stop - 0,42
# Play - 0,41
# Record - 0,45
# Track < - 0,58
# Track > - 0,59
