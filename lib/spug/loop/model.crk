# Copyright 2012 Google Inc.  All Rights Reserved.
#
# Spugloop model objects.

import crack.audio.wavfile WaveBuffer;
import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.cont.treemap TreeMap;
import crack.fs cwd, makePath;
import crack.functor Functor1, Functor2;
import crack.io cerr, FStr, StringReader, StringWriter;
import crack.lang cmp, makeHashVal, CString, Exception;
import crack.logger error, info;
import crack.math floor;
import crack.midi.event ChannelEvent, ControlChange, EndTrack, Event,
    MidiReader, MidiWriter, ProgramChange, SeekableEventSource, Track;
import crack.protobuf readMessageFromString, Field, ProtoReader, ProtoWriter;
import spug.loop.instrument Instrument, Orchestra;
import spug.loop.jack SequencerWaveModel, Wave, WaveAdapter, WaveManager,
    WaveModel, WindowBufferAdapter;
import crack.midi.alsa Port, Sequencer;
import crack.protobuf Message;
import crack.serial SerialReader, SerialWriter;
import crack.threads Mutex, MutexLock, Queue = Queue2, Thread;
import crack.time Time_add = add, Time, TimeDelta;

@import crack.ann assert, cvars, impl, implements, interface;
@import crack.protobuf.ann protobuf;
@import .ann immut, nullable, over;

## Defines a midi bank.  This can be applied to an Orchestra object to change
## the instrument configuration for a given channel.
@interface Bank {
    @abstract void configure(Orchestra orchestra, uint channel);

    @final bool oper >=(Bank other) {
        return uintz(this) >= uintz(other);
    }

    @final bool oper <=(Bank other) {
        return uintz(this) <= uintz(other);
    }
}

class WavePlayerBank : Object @implements Bank {
    void configure(Orchestra orchestra, uint channel) {

    }
}

@protobuf {

    ## A "mark" is a stored position in the section, measured in frames since
    ## the beginning of the section at 44.1k.
    message Mark {

        ## Position in frames.
        optional int32 pos = 1;

        ## Mark name.
        optional string name = 2;
    }

    message SectionOptionalData {
        repeated Mark marks = 1;
    }
}

## Interface for any kind of track.
@interface OmniTrack {
    ## The track name.
    @abstract String oper .name();

    ## Clone the track with a new name.
    @abstract OmniTrack rename(String name);
}

class AudioTrack @impl OmniTrack {
    @cvars {
        String __name;
        uint __span;
    }

    String oper .name() { return __name; }
    uint oper .span() { return __span }

    OmniTrack rename(String name) {
        return AudioTrack(name, __span);
    }
}

class WaveTrack : AudioTrack {
    WaveModel __model;
    int __channel;

    oper init(WaveModel model, int channel, String name, uint span) :
        AudioTrack(name, span),
        __model = model,
        __channel = channel {
    }

    uint oper .channels() { return __model.channels }
    uint oper .frames() { return __model.frames }
    int oper .channel() { return __channel }

    @over OmniTrack rename(String name) {
        return WaveTrack(__model, __channel, name, span);
    }

    ## Read a sequence of samples into 'outputs'.
    ##
    ## pos: position (frame number) to read from.
    ## out: An output buffer.  This can be expected to be of size
    ##      frames * channels
    ## outputs: Set of buffers to read into.  It is safe to assume that the
    ##          number of buffers is the same as this.tracks.
    ## frames: Number of frames to read.
    @final void read(uint pos, WaveBuffer out, uint frames) {
        return __model.read(pos, out, frames);
    }
}

class MidiTrack @impl OmniTrack {
    @cvars {
        Track __track;
    }

    String oper .name() { return __track.name }
    Track oper .track() { return __track }

    @over OmniTrack rename(String name) {
        events := Array[Event]();
        for (event :in __track)
            events.append(event);
        return MidiTrack(Track(name, events));
    }
}

## This is a "section" of the piece.  A section consists of a group of tracks
## that are played in parallel.  A section consists of one or more "measures"
## which should normally be the size of the shortest track.  Every track
## should completely fill some number of measures.
class Section {

    ## The size of a measure in pulses.  A value of zero is used when there
    ## are no tracks.
    uint measure;

    ## The time span of the section in pulses.
    uint span;

    ## Optional data.
    SectionOptionalData optionalData;

    ## The set of all tracks in the section.
    Array[Track] tracks;

    ## The set of all waves in the section.
    Array[WaveTrack] waves = {};

    oper init() : tracks() {}
    oper init(Array[Track] tracks, uint measure, uint span) :
        tracks = tracks,
        measure = measure,
        span = span {
    }

    class Mut = Section {

        ## Records the "end of track" time.  If there is only one track it also
        ## sets the measure time.
        ## If 'snapToMeasure' is true, snap the end time and events to the nearest
        ## measure boundary.  That is to say, it changes the end time to the end of the last
        ## measure if that is closer than the end of the next measure and
        ## moves all events past the end of the last measure back to align with
        ## the ending.
        @final void markEnding(Track lastTrack, uint time, bool snapToMeasure) {

            if (!span) {
                span = measure = time;
            # verify that the time is an even multiple of the current span
            } else {

                # If we don't have measure defined, define it now.
                if (!measure)
                    measure = time;

                # if the end time is closer to the beginning of the measure than
                # to the end, trim all events to the end of the measure boundary.
                if (snapToMeasure) {
                    timeInMeasure := time % measure;
                    if (timeInMeasure < measure - timeInMeasure) {
                        time -= timeInMeasure;
                        if (lastTrack) {
                            for (event :in lastTrack)
                                if (event.time > time)
                                    event.time = time;
                        }
                    }
                }

                if (time > span) {
                    info `increasing span: $time / $span`;
                    multiple := (time - 1) / span + 1;
                    span *= multiple;
                }
                time = span;
            }

            # If we've been given a track with no end event, add one.  If there
            # is already an end event, we've already snapped it to the measure if
            # this was requested.
            if (lastTrack && (!lastTrack.count() || !lastTrack[-1].isa(EndTrack)))
                lastTrack.add(EndTrack(time));
        }

        Mut deleteTrack(uint index) {
            tracks.delete(index);

            # deal with deleting the last track.
            if (!tracks.count()) {
                span = measure = 0;
                return this;
            }

            # recalculate the span
            maxSpan := 0;
            uint t;
            for (track :in tracks) {
                t = track[-1].time;
                if (t > maxSpan)
                    maxSpan = t;
            }
            span = t;
            return this;
        }

        Mut replaceTrack(uint index, OmniTrack track) {
            if (t := MidiTrack.cast(track, null)) {
                tracks[index] = t.track;
            } else if (t := WaveTrack.cast(track, null)) {
                waves[index - tracks.count()] = t;
            } else {
                throw Exception(
                    FStr() `Unknown track type $(track.class.name)`
                );
            }
            return this;
        }

        void readFrom(SerialReader src) {
            measure = src.readUInt();
            span = src.readUInt();
            trackCount := src.readUInt();

            for (int i = 0; i < trackCount; ++i) {
                trackName := src.readString();
                MidiReader mr = {StringReader(src.readString())};
                tracks.append(track := mr.readTrack(trackName));

                # Read and discard the optional track data.
                src.readString();

                info `track $i:\n$track`;
            }

            # Read the optional data.
            optionalDataString := src.readString();
            optionalData = SectionOptionalData();
            readMessageFromString(optionalData, optionalDataString);
        }
    }

    @static Mut makeMut() {
        return Mut(Section());
    }

    ## Returns an immutable OmniTrack wrapper around the specified track (midi
    ## or audio).
    OmniTrack getTrack(uint index) {
        if (index > tracks.count())
            return waves[index - tracks.count()];

        return MidiTrack(tracks[index]);
    }

    void writeTo(SerialWriter out) {
        out.write(measure);
        out.write(span);
        out.write(tracks.count());

        for (track :in tracks) {

            # write the track name
            out.write(track.name);

            # serialize the track, then write it out as a string since tracks
            # are not delimited.
            StringWriter temp = {};
            MidiWriter mw = {temp};
            track.writeTo(mw);
            mw.flush();
            out.write(temp.makeString());

            # Write the track's optional data (we don't currently preserve
            # this).
            out.write(0);
        }

        # Write the section's optional data.
        if (optionalData)
            optionalData.serialize(ProtoWriter(out));
        else
            out.write(0);
    }

    Mut clone() {
        newTracks := Array[Track]();
        for (track :in tracks) {
            newTrack := Track(track.name);
            newTracks.append(newTrack);
            for (event :in track)
                newTrack.append(event.clone());
        }
        result := Section(newTracks, measure, span);

        # We treat WaveTracks as immutable (they seem to effectively be so).
        # The array, however, is not.
        result.waves = waves.clone();

        if (optionalData) {
            # Clone optional data by serializing and deserializing.
            result.optionalData = SectionOptionalData();
            readMessageFromString(result.optionalData, optionalData.toString());
        }

        return Mut(result);
    }
}

## Global play modes.
const int IDLE = 0, RECORD = 1, PLAY = 2, LATCHED_RECORD = 3;

# message ProjectOptional {
#   repeated string wavefile = 1;
# }
const PROJ_WAVEFILE := 1;

## This is the main class representing a project.
##
## Project objects, and everything in them, are immutable.
class Project {
    Array[Section] __sections = {};

    ## The next section number that hasn't been used as part of a section name.
    int __nextSectionNumber;

    ## The set of all wave files known to the project.
    Array[String] waveFiles = {};

    ## Unknown fields, preserved so we can write them back.
    Array[Field] __unknownFields = {};

    # Special midi banks.
    TreeMap[uint16, Bank] __banks;

    oper init() {}

    ## Temporary and deprecated: returns the list of sections.
    Array[Section] oper .sections() { return __sections }

    ## Write the current project to a file.
    void writeTo(SerialWriter out) {
        # version number
        out.write(1);

        # Write the optional project data.
        StringWriter outBack = {};
        opt := ProtoWriter(outBack);
        for (waveFile :in waveFiles)
            opt.write(1, waveFile);
        for (unknown :in __unknownFields)
            opt.write(unknown);
        out.write(outBack.string());

        # write the section count, then each of the sections.
        out.write(__sections.count());
        for (section :in __sections)
            section.writeTo(out);
    }

    int getSectionCount() {
        return __sections.count();
    }

    class Mut = Project {

        void readFrom(SerialReader src) {
            __sections.clear();
            if ((v := src.readUInt()) != 1)
                throw Exception(FStr() `Invalid varsion number: $v`);

            # Read optional data.
            optionalData := src.readString();
            opt := ProtoReader(StringReader(optionalData));
            while (field := opt.readField()) {
                if (field.id == PROJ_WAVEFILE)
                    waveFiles.append(field.getString());
                else
                    __unknownFields.append(field);
            }

            sectionCount := src.readUInt();
            for (i := 0; i < sectionCount; ++i) {
                section := Section.makeMut();
                section.readFrom(src);
                __sections.append(section);
            }
        }

        Mut replaceSection(Section oldSec, Section newSec) {
            for (cur :on __sections) {
                if (cur.elem() is oldSec) {
                    __sections[cur.index] = newSec;
                    break;
                }
            }
            return this;
        }

        Mut addSection(Section sec) {
            __sections.append(sec);
            return this;
        }
    }

    ## Return a new mutable project instance.
    @static Mut makeMut() {
        return Mut(Project());
    }

    Project.Mut clone() {
        p := Project();
        p.__sections = __sections;
        p.__nextSectionNumber = __nextSectionNumber;
        p.waveFiles = waveFiles;
        p.__unknownFields = __unknownFields;
        p.__banks = __banks;
        return Mut(p);
    }
}

@interface Controller {
    @abstract void changeState(int oldState, int newState);
    @abstract void trackAdded();
    @abstract void trackReplaced(uint index, OmniTrack track);
    @abstract void waveAdded();
    @abstract void trackDeleted(uint index);
    @abstract void sectionCreated();
    @abstract void sectionChanged();
}

## Threadsafe object that references a project and the current section.
class ProjectRef {
    @immut Project __project;
    @immut Section __section;
    Mutex __mutex = Mutex();

    # Legacy project filename.
    String __projectFileName = 'unnamed';

    Controller __controller;

    void clear();

    oper init() {
        clear();
    }

    void updateProject(Project project) {
        lk := MutexLock(__mutex);
        __project = project;
    }

    ## Replace the current section with newSec.
    @final void __replaceSection(Section newSec) {
        __project = __project.clone().replaceSection(__section, newSec);
        __section = newSec;
    }

    ## Load the track and set the filename.  Does nothing if the file doesn't
    ## exist.
    void load(String filename) {
        lk := MutexLock(__mutex);
        __projectFileName = filename;
        path := makePath(filename);
        if (path.exists()) {
            project := Project.makeMut();
            project.readFrom(SerialReader(path.reader()));
            __project = project;
            __section = project.sections[0];
            info `tracks in cur section: $(__section.tracks.count())`;
            lk = null;
            if (__controller)
                __controller.sectionChanged();
        }
    }

    void save() {
        __project.writeTo(SerialWriter(makePath(__projectFileName).writer()));
    }

    ## Clear out all project contents.
    void clear() {
        proj := Project.makeMut();
        proj.addSection(Section());
        __project = proj;
        __section = __project.sections[0];
    }

    ## Add a track to the current section.
    void addTrack(Track track) {
        lk := MutexLock(__mutex);
        Event lastEvent;
        @assert(track.count() && (lastEvent = track[-1]).isa(EndTrack));
        sec := __section.clone();
        sec.markEnding(track, lastEvent.time, true);
        sec.tracks.append(track);
        __replaceSection(sec);

        lk = null;
        if (__controller)
            __controller.trackAdded();
    }

    ## Add a set of tracks to the current section.
    void addTracks(Array[Track] tracks) {
        lk := MutexLock(__mutex);
        sec := __section.clone();
        Event lastEvent;
        for (track :in tracks) {
            @assert(track.count() && (lastEvent = track[-1]).isa(EndTrack));
            sec.tracks.append(track);
        }
        if (lastEvent) {
            sec.markEnding(null, lastEvent.time, true);
            __replaceSection(sec);
        }

        lk = null;
        __controller.trackAdded();
    }

    void __addTrack(Track track) {
        sec := __section.clone();
        Event lastEvent;
        @assert(track.count() && (lastEvent = track[-1]).isa(EndTrack));
        if (lastEvent.time > sec.span)
            sec.span = lastEvent.time;

        sec.tracks.append(track);
        __replaceSection(sec);
    }

    void addTrack(OmniTrack track) {
        lk := MutexLock(__mutex);
        if (t := AudioTrack.cast(track, null))
            __addTrack(Track(t.name, Array[Event]![EndTrack(t.span)]));
        else if (t := MidiTrack.cast(track, null))
            __addTrack(t.track);
        else
            throw Exception(FStr() `Unknown track type $(track.class.name)`);

        lk = null;
        if (__controller)
            __controller.trackAdded();
    }

    ## Replace the track in the specified index in the current section with
    ## "newTrack".
    void replaceTrack(uint index, OmniTrack newTrack) {
        lk := MutexLock(__mutex);
        __replaceSection(__section.clone().replaceTrack(index, newTrack));

        lk = null;
        if (__controller)
            __controller.trackReplaced(index, newTrack);
    }

    ## Create a new section.  If we're in "play" mode, make the new section
    ## the next section to play.
    ## seedTracks: tracks to seed the new section with.
    void createSection(@nullable Array[Track] seedTracks) {
        lk := MutexLock(__mutex);

        # if there are seed tracks, use the current section's measure and
        # obtain the span from the seed track.  Otherwise just create an empty
        # section.
        Section newSection = Section();
        if (seedTracks) {
            uint span;
            for (track :in seedTracks) {
                t := track[-1].time;
                if (t > span)
                    span = t;
            }
            newSection = Section(seedTracks, __section.measure, span);
        } else {
            newSection = Section();
        }

        newProject := __project.clone();
        newProject.addSection(newSection);
        __project = newProject;

        lk = null;
        if (__controller)
            __controller.sectionCreated();
    }

    ## Return the current section.
    @immut Section oper .curSection() {
        lk := MutexLock(__mutex);
        return __section;
    }

    @immut Track getTrackByName(String name) {
        lk := MutexLock(__mutex);
        for (track :in __section.tracks) {
            if (track.name == name)
                return track;
        }

        return null;
    }

    void deleteTrack(uint index) {
        lk := MutexLock(__mutex);
        __replaceSection(__section.clone().deleteTrack(index));

        lk = null;
        if (__controller)
            __controller.trackDeleted(index);
    }

    ## Set the "controller" which is actually more of an observer -- it gets
    ## notifications on project status changes.
    void setController(Controller controller) {
        lk := MutexLock(__mutex);
        __controller = controller;
    }

    uint getSectionCount() {
        lk := MutexLock(__mutex);
        return __project.getSectionCount();
    }
}

Array[String] programNames = [
    'Acoustic Grand Piano',
    'Bright Acoustic Piano',
    'Electric Grand Piano',
    'Honky-tonk Piano',
    'Electric Piano 1',
    'Electric Piano 2',
    'Harpsichord',
    'Clavi',
    'Celesta',
    'Glockenspiel',
    'Music Box',
    'Vibraphone',
    'Marimba',
    'Xylophone',
    'Tubular Bells',
    'Dulcimer',
    'Drawbar Organ',
    'Percussive Organ	',
    'Rock Organ',
    'Church Organ',
    'Reed Organ',
    'Accordion',
    'Harmonica',
    'Tango Accordion',
    'Acoustic Guitar (nylon)',
    'Acoustic Guitar (steel)',
    'Electric Guitar (jazz)',
    'Electric Guitar (clean)',
    'Electric Guitar (muted)',
    'Overdriven Guitar',
    'Distortion Guitar',
    'Guitar harmonics',
    'Acoustic Bass',
    'Electric Bass (finger)',
    'Electric Bass (pick)',
    'Fretless Bass',
    'Slap Bass 1	',
    'Slap Bass 2	',
    'Synth Bass 1',
    'Synth Bass 2',
    'Violin',
    'Viola',
    'Cello',
    'Contrabass',
    'Tremolo Strings',
    'Pizzicato Strings',
    'Orchestral Harp',
    'Timpani',
    'String Ensemble 1',
    'String Ensemble 2',
    'SynthStrings 1',
    'SynthStrings 2',
    'Choir Aahs',
    'Voice Oohs',
    'Synth Voice',
    'Orchestra Hit',
    'Trumpet',
    'Trombone',
    'Tuba',
    'Muted Trumpet',
    'French Horn',
    'Brass Section',
    'SynthBrass 1',
    'SynthBrass 2',
    'Soprano Sax',
    'Alto Sax',
    'Tenor Sax',
    'Baritone Sax',
    'Oboe',
    'English Horn',
    'Bassoon',
    'Clarinet',
    'Piccolo',
    'Flute',
    'Recorder',
    'Pan Flute',
    'Blown Bottle',
    'Shakuhachi',
    'Whistle',
    'Ocarina',
    'Lead 1 (square)',
    'Lead 2 (sawtooth)',
    'Lead 3 (calliope)',
    'Lead 4 (chiff)',
    'Lead 5 (charang)',
    'Lead 6 (voice)',
    'Lead 7 (fifths)',
    'Lead 8 (bass + lead)',
    'Pad 1 (new age)',
    'Pad 2 (warm)',
    'Pad 3 (polysynth)',
    'Pad 4 (choir)',
    'Pad 5 (bowed)',
    'Pad 6 (metallic)',
    'Pad 7 (halo)',
    'Pad 8 (sweep)',
    'FX 1 (rain)',
    'FX 2 (soundtrack)',
    'FX 3 (crystal)',
    'FX 4 (atmosphere)',
    'FX 5 (brightness)',
    'FX 6 (goblins)',
    'FX 7 (echoes)',
    'FX 8 (sci-fi)',
    'Sitar',
    'Banjo',
    'Shamisen',
    'Koto',
    'Kalimba',
    'Bag pipe',
    'Fiddle',
    'Shanai',
    'Tinkle Bell',
    'Agogo',
    'Steel Drums',
    'Woodblock',
    'Taiko Drum',
    'Melodic Tom',
    'Synth Drum',
    'Reverse Cymbal',
    'Guitar Fret Noise',
    'Breath Noise',
    'Seashore',
    'Bird Tweet',
    'Telephone Ring',
    'Helicopter',
    'Applause',
    'Gunshot',

    # 128 - fake programs
    'Drumz',
];

class ChannelInfo {
    byte program;

    oper init(byte program) : program = program {}
    String getProgramName() { return programNames[program]; }
}

class ChannelMap {
    byte currentChannel;
    Array[ChannelInfo] programs = [
        ChannelInfo(0), # 0 Grand Piano
        ChannelInfo(32), # 1 Bass
        ChannelInfo(48), # 2 strings
        ChannelInfo(18), # 3 Rock Organ
        ChannelInfo(3),  # 4 Honky Tonk
        ChannelInfo(80), # 5 Synth (square)
        ChannelInfo(30), # 6 Overdrive Guitar
        ChannelInfo(66), # 7 Tenor Sax
        ChannelInfo(62), # 8 Brass Section
        ChannelInfo(128), # channel 9, this is going to be drums
    ];

    ChannelInfo getCurrentChannel() { return programs[currentChannel]; }
}

class LoopCursor {
    Track track;
    int index;

    # time of the current position and span of the entire track.
    uint time, span;
    oper init(Track track) : track = track {
        time = track[0].time;

        # make sure our last event is an EndTrack.
        EndTrack.cast(track[-1]);
        span = track[-1].time;
    }

    Event elem() { return track[index] }

    Event next() {
        cur := track[index];
        ++index;
        if (index == track.count() - 1) {
            # make sure we are at an end event.
            EndTrack.cast(track[index]);
            index = 0;
        }
        time = track[index].time;
        return cur;
    }

    ## Returns true if the event is the next event in the track following
    ## 'pos'.
    bool immediatelyFollows(uint pos) {
        if (index == 0) {
            if (track.count() == 1)
                return false;
            # the last event is the end track marker, check to see that pos is
            # either greater than the /next to last/ event or less than the
            # current one.
            return pos >= track[-2].time || pos < time;
        } else {
            # if this isn't the first event, we just need to verify that pos
            # is between the last event and the current one.
            return pos < time && pos >= track[index - 1].time;
        }
    }

    ## True if the track is not empty.
    bool isTrue() { return track.count() > 1 }

    void setPos(uint pos) {
        while (!immediatelyFollows(pos)) next();
    }
}

const MILLION := 1000000;
const BILLION := MILLION * 1000;

@interface EventContext {
    @abstract void setControllerOffset(uint offset);
}
