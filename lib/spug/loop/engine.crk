## Facade to simplify interactions with the midi engine, jack engine and
## underlying project model object.

import crack.audio.wavfile WaveDef;
import crack.cont.array Array;
import crack.cont.treemap TreeMap;
import crack.fs makePath;
import crack.functor Functor0, Functor1, Functor2;
import crack.io cerr, FStr;
import crack.lang AssertionError, CString, InvalidArgumentError;
import crack.midi.alsa Port, Sequencer, SND_SEQ_OPEN_INPUT,
    SND_SEQ_OPEN_OUTPUT;
import crack.midi.event Event, Track;
import crash.crash Obj;

import .instrument MidiInstrument, Orchestra;
import .jack JackPos, JackWrapper, WaveManager, RecordBuffer,
    WaveAdapter, WaveModel, WindowBufferAdapter, JACK_TRANSPORT_ROLLING;
import .midieng ControllerDispatcher, EventProcessor, MidiDispatcher,
    MidiEngine, MidiSequencer, ModelObserver, ST_IDLE, ST_PLAY, ST_LATCHED,
    ST_RECORD;
import .midifile MidiFile;
import .model AudioTrack, EventContext, OmniTrack, ProjectRef, Section,
    WaveTrack;

@import crack.ann assert, cvars, impl;
@import .ann immut, nullable;

class AWBEngine;

## Does standard initialization for the midi engine.
MidiEngine makeMidiEngine(WaveManager waveMan, ProjectRef project) {
    # Create the sequencer and midi engine.
    seq := Sequencer(SND_SEQ_OPEN_OUTPUT | SND_SEQ_OPEN_INPUT, 0);
    seq.seq.set_client_name('AWBX'.buffer);
    eng := MidiEngine(waveMan, seq, project);

    # Create some sequencer ports.
    # XXX Hack.  Remove once we have a more principled way of adding ports.
    eng.outPort = seq.makeReadPort('out');
    seq.makeWritePort('in');

    # Drivers start your engines!
    eng.start();
    return eng;
}

## Abstract recorder object, defines a set of source ports (either midi or
## audio) and a destination.
@abstract class Recorder {
    @abstract void init(AWBEngine eng);
    @abstract void close(AWBEngine eng);
}

alias LegacyEventProcessor = Functor2[void, Event, EventContext];

## AWBEngine provides a unified front to both the Jack and Midi Engines.
class AWBEngine @impl ModelObserver {

    MidiEngine __midi;
    WaveManager __jack;
    ProjectRef __project;

    # Indicator as to whether we should start recording a midi track the next
    # time we record.
    #
    # Hack until MidiEngine gets support for multiple record tracks.
    bool __midiRecordArmed;

    Array[Recorder] __recorders = {};

    # Tree to track the output ports.  The key is (client << 16) | port_number.
    TreeMap[int, Port] __portCache = {};

    # The sequencer, which we keep track of purely for managing ports.
    Sequencer __seq;

    # Current state.  See midieng ST_* constants.
    int __state = ST_IDLE;

    # Input processor that serves as a bridge to legacy controller events.
    ControllerDispatcher __controllerDispatcher = {};

    void setTempo(int bpm);

    ## Construct the engine using the old event manager.
    oper init() :
        __jack = WaveManager.create(),
        __project() {

        __midi = makeMidiEngine(__jack, __project);
        __seq = __midi.sequencer;

        # Set a uniform tempo and make the midi engine send tracks to us
        # (note: creates a reference cycle)
        __midi.setModelObserver(this);
        setTempo(120);

        # Add the controller dispatcher as an input processor so we can
        # continue to dispatch to legacy controller processors.
        __midi.addInputProcessor(__controllerDispatcher);

    }

    oper del() {
        __jack.deactivate();
    }

    void copySection();

    ## Toggle playing midi and jack.
    void play() {
        if (__state != ST_IDLE) {
            cerr `play() called while already playing/recording/latched.\n`;
            return;
        }

        if (__state == ST_IDLE)
            copySection();
        __jack.unpause();
        # TODO: do this in a more principled manner since we're now the
        # owner of the state?
        __midi.togglePlay();
        __state = ST_PLAY;
    }

    void __closeAllRecorders() {
        for (rec :in __recorders)
            rec.close(this);
    }

    ## Pause midi and jack.  This also ends recording.
    void pause() {
        if (__state == ST_IDLE) {
            cerr `pause() called while already idle.\n`;
            return;
        }

        __jack.pause();
        __midi.togglePlay(); # TODO: see notes above.

        ## Close out all recorders if recording.
        if (__state == ST_RECORD)
            __closeAllRecorders();

        __state = ST_IDLE;
    }

    ## Adds a new "record path" that defines a source and destination for the
    ## next record.
    ##
    ## It is currently not legal to call this when recording.
    void addRecorder(Recorder path) {
        @assert(__state != ST_RECORD);
        __recorders.append(path);
    }

    ## Remove a recorder.
    ##
    ## It is currently illegal to call this when the engine is recording.
    void removeRecorder(Recorder rec) {
        @assert(__state != ST_RECORD);
        for (i :on __recorders) {
            if (i.elem() is rec) {
                __recorders.delete(i.index);
                break;
            }
        }
    }

    ## Clears all record paths.
    ##
    ## Again, it is currently illegal to call this when the engine is recording.
    void clearRecorders() {
        @assert(__state != ST_RECORD);
        __recorders.clear();
    }

    ## Start recording.  There must be at least one recorder specified.
    void record() {
        if (!__recorders)
            throw AssertionError('No recorders defined.');

        if (__state == ST_RECORD)
            throw AssertionError('Already recording.');

        for (rec :in __recorders)
            rec.init(this);

        if (__state == ST_IDLE)
            __jack.unpause();

        if (__midiRecordArmed)
            __midi.toggleRecord();
        else
            __midi.togglePlay();
        __state = ST_RECORD;
    }

    ## Start/stop playing from both systems.
    ##
    ## If we are currently recording, this also effectively stops recording.
    void togglePlay() {
        if (__state == ST_IDLE)
            play();
        else
            pause();
    }

    ## Start/stop recording.  If we're already recording, go into "play" state.
    void toggleRecord() {
        if (__state == ST_RECORD) {
            if (__midiRecordArmed)
                __midi.toggleRecord();
            __closeAllRecorders();
            __state = ST_PLAY;
        } else {
            record();
        }
    }

    ## Put the engine into "latched for record" mode.
    ##
    ## If there are tracks, this should start the tracks playing and should be
    ## no different from "record" mode.
    void latchForRecord() {
        __midi.latchForRecord();
    }

    void addTrack(Track track) {
        __project.addTrack(track);
    }

    ## Replace the indexed track in the current section.
    void replaceTrack(uint index, OmniTrack track) {
        __project.replaceTrack(index, track);
    }

    ## Add a wave file as a track in the current section.
    WindowBufferAdapter addWaveFile(String filename, String trackName) {
        result := __jack.addFile(filename);

        # Calculate end time in microseconds.
        endTime := uint64(result.getFrameCount()) * 1000000 /
                   uint64(result.getRate());

        spanInTicks := __midi.usecsToTicks(endTime);
        __project.addTrack(AudioTrack(trackName, spanInTicks));

        return result
    }

    ## Add a wave file as a track in the current section, use 'filename' as
    ## the track name.
    WindowBufferAdapter addWaveFile(String filename) {
        return addWaveFile(filename, filename);
    }

    ## Adds a new WaveModel track.
    WaveAdapter addWaveModel(WaveModel model, String trackName) {

        result := __jack.addWaveModel(model);
        spanInUSecs := uint64(model.frames) * 1000000 / 44100;
        spanInTicks := __midi.usecsToTicks(spanInUSecs);
        __project.addTrack(WaveTrack(model, 0,  trackName, spanInTicks));
        return result;
    }

    ## Add all tracks of a midi file to the engine.
    void addMidiFile(String filename) {
        file := MidiFile.read(makePath(filename).reader());

        # Set the track names, just use the filename
        if (file.tracks.count() == 1) {
            file.tracks[0].name =
                filename.endsWith('.mid') ? filename.slice(0, -4) : filename;
        } else {
            for (trackIter :on file.tracks)
                trackIter.elem().name =
                    FStr() `$(filename):$(trackIter.index)`;
        }
        __project.addTracks(file.tracks);

        # We can't do this here because it asserts that no tracks exist in
        # the midi engine.  TODO: find a better way to deal with this.
        #__midi.setPPB(file.ticksPerQN);
    }

    ## Set the track name to be used for all subsequent midi recordings.
    void setMidiRecordTrackName(String name) {
        __midi.setRecordTrackName(name);
    }

    ## Returns the engine's audio sample rate.
    int getAudioRate() {
        return __jack.getSampleRate();
    }

    ## Returns the wave manager (a jack wrapper).
    WaveManager getWaveManager() {
        return __jack;
    }

    ## Returns the midi engine.
    MidiEngine getMidiEngine() {
        return __midi;
    }

    ## Returns the sequencer.
    Sequencer getSequencer() {
        return __seq;
    }

    ## Load an old-style project into the event manager.
    void loadProject(String filename) {
        __project.load(filename);
    }

    ## Sets the global tempo (in beats per minute).  Different portions of
    ## the piece can have different tempos, but they're all scaled to the
    ## global tempo.
    void setTempo(int bpm) {
        __midi.setBPM(bpm);
    }

    ## Returns the current tempo.
    int getTempo() {
        return __midi.getBPM()
    }

    void setPPB(int ppb) {
        __midi.setPPB(ppb);
    }

    ## Returns pulses-per-beat ("pulses per quarter note" in midi parlance).
    int getPPB() {
        return __midi.getPPB();
    }

    ## Reset the play position to the start of section.
    void resetPos() {
        __midi.setPos(0);
        __jack.seek(0);
    }

    ## Set the position in midi ticks.
    void setPos(int pos) {
        __midi.setPos(pos);

        # Given pulses per second and frames per second (the sample rate) we
        # can compute frames per pulse as fps / pps.
        pps := float(__midi.getBPM()) * float(__midi.getPPB()) / 60.0;
        framesPerTick := float(__jack.getSampleRate()) / pps;
        __jack.seek(int(float(pos) * framesPerTick));
    }

    ## Enable the midi recorder.  Allows MidiTrackRecorder to do its thing.
    ##
    ## TODO: Provide a better interface in MidiEngine so that we can have
    ## multiple midi recorders.
    void _armMidiRecord(bool armed) {
        __midiRecordArmed = armed;
    }

    ## Returns the first track that has the given name.
    Track getTrackByName(String name) {
        return __project.getTrackByName(name);
    }

    ## Returns the set of tracks in the current section as an array.
    @immut Array[Track] getAllTracks() {
        return __project.curSection.tracks;
    }

    ## Returns the mutable project reference.
    ProjectRef oper .project() { return __project }

    ## Returns the current section.
    @immut Section getCurrentSection() {
        return __project.curSection;
    }

    ## Add a midi event processor to the input chain.
    void addInputProcessor(EventProcessor processor) {
        __midi.addInputProcessor(processor);
    }

    ## Insert an event processor at the given index in the input processor
    ## chain.
    ##
    ## Throws IndexError if the index is out of range.
    void insertInputProcessor(int index, EventProcessor processor) {
        __midi.insertInputProcessor(index, processor);
    }

    ## Remove the specified event processor from the input processor chain.
    ##
    ## Throws NotFoundError if the processor is not in the chain.
    void removeInputProcessor(EventProcessor processor) {
        __midi.removeInputProcessor(processor);
    }

    ## Add a midi event processor to the output chain.
    void addOutputProcessor(EventProcessor processor) {
        __midi.addOutputProcessor(processor);
    }

    ## Insert an event processor at the given index in the output processor
    ## chain.
    ##
    ## Throws IndexError if the index is out of range.
    void insertOutputProcessor(int index, EventProcessor processor) {
        __midi.insertOutputProcessor(index, processor);
    }

    ## Remove the specified event processor from the output processor chain.
    ##
    ## Throws NotFoundError if the processor is not in the chain.
    void removeOutputProcessor(EventProcessor processor) {
        __midi.removeOutputProcessor(processor);
    }

    ## Bind an event processor to a control number (channel << 8 + controller
    ## + offset).
    ##
    ## TODO: move this logic out of here, there should be a "controller
    ## dispatcher" event processor that multiplexes to per controller
    ## processors.
    void addEventProcessor(int eventSelector, LegacyEventProcessor processor) {
        __controllerDispatcher.setEventProcessor(eventSelector, processor);
    }

    ## Copy the current section from the event manager to the midi engine.
    ##
    ## This should go away, it exists as a shim so that scripts can populate
    ## the event manager and then move tracks to the midi engine.
    void copySection() {
        __midi.setSection(__project.curSection);
    }

    ## Export the specified tracks to the given file.
    void exportMidiFile(String filename, Array[int] trackNumbers) {
        tracks := Array[Track]();
        file := MidiFile(__midi.getPPB(), float(__midi.getBPM()));
        for (trackNum :in trackNumbers) {
            track := __project.curSection.tracks[trackNum];
            file.append(track);
        }
        file.write(makePath(filename).writer());
    }

    ## Begin recording to the specified stereo file, return a RecordBuffer.
    RecordBuffer recordStereoFile(String filename) {
        def := WaveDef(2, 44100, 16);
        out := makePath(filename).writer();
        def.writeHeader(out);
        return __jack.beginRecord(def, out, 0);
    }

    ## Begin recording to the specified mono file, return a RecordBuffer.
    ## 'channel' is zero to record from the left channel, 1 from the right.
    RecordBuffer recordMonoFile(String filename, int channel) {
        def := WaveDef(1, 44100, 16);
        out := makePath(filename).writer();
        def.writeHeader(out);
        return __jack.beginRecord(def, out, channel);
    }

    ## Clear the entire project state.
    void clear() {
        __project.clear();
        __midi.setSection(Section());
    }

    ## Send a (automatically generated) input event to the midi engine.
    void sendEvent(Event event) {
        __midi.sendEvent(event);
    }

    ## Save the old-style project file.
    void saveClassicProjectFile() {
        __project.save();
    }

    ## Create a new section, copying the specified tracks into it.
    ##
    ## Returns the new section index.
    int createSection(@nullable Array[Track] tracks) {
        return __project.createSection(tracks);
    }

    ## Set the current section to that specified.
    void setSection(int index) {
        __project.setSection(index);
    }

    ## Set the next section to be played based on the index.
    ##
    ## Currently actually does nothing.
    void setNextSection(int index) {
        # __eventManager.setNextSection(index);
    }

    ## Returns the index of the current next section.
    ##
    ## Currently actually always returns 0.
    int getNextSectionIndex() {
        # return __eventManager.getNextSectionIndex();
        return 0;
    }

    ## Returns the number of sections.
    int getSectionCount() {
        return __project.getSectionCount();
    }

    ## Delete the specified track in the current section.
    void deleteTrack(int index) {
        __project.deleteTrack(index);
    }

    ## Returns true if the engine is currently in play/record and there are
    ## tracks in the current section.
    bool playingExistingTracks() {
        return __midi.playingExistingTracks();
    }

    ## Returns the time in ticks since the beginning of the section.  Note
    ## that this will not change when idle.
    uint getTicks() {
        return __midi.getTicks();
    }

    ## Return the output port connected to the specified client and port,
    ## creating one if necessary.
    Port getOutPort(int client, int portNum) {
        port := __portCache.get(client << 16 | portNum);
        if (!port) {
            port = __seq.makeWritePort(
                CString(FStr() `crack-$client:$portNum`)
            );
            __portCache[client << 16 | portNum] = port;
        }
        port.connectTo(client, portNum);
        return port;
    }
}

const LEFT := 1;
const RIGHT := 2;

## Records from jack audio to a stereo wave file.
class AudioFileRecorder : Recorder {
    RecordBuffer buf;
    bool __monitor;

    ## Callback to be invoked when "close()" is called (when the recording is
    ## completed).
    Functor0[void] closeCallback;

    @cvars {
        String filename;

        ## A bitmap of channel constants (LEFT and/or RIGHT) to record from.
        ## If one is specified, record mono.  Record stereo if both are
        ## specified.
        int channels;
    }

    void init(AWBEngine engine) {
        WaveDef def;
        int channel;
        if (channels == 3) {
            def = WaveDef(2, engine.getAudioRate(), 16);
        } else {
            def = WaveDef(1, engine.getAudioRate(), 16);
            if (channels == LEFT)
                channel = 0;
            else if (channels == RIGHT)
                channel = 1;
            else
                throw InvalidArgumentError(
                    FStr() I`Bad channel map (1, 2, or 3 expected, got \
                             $channels`
                );
        }
        out := makePath(filename).writer();
        def.writeHeader(out);
        buf = engine.getWaveManager().beginRecord(def, out, channel);
        buf.monitor = __monitor;

    }

    void close(AWBEngine engine) {
        buf.finish();
        if (closeCallback)
            closeCallback();
    }

    bool oper .monitor=(bool enabled) {
        if (buf)
            buf.monitor = enabled;
        __monitor = enabled;
        return enabled;
    }

    bool oper .monitor() { return buf ? buf.monitor : __monitor }
}

class MidiTrackRecorder : Recorder {
    void init(AWBEngine engine) {
        engine._armMidiRecord(true);
    }

    void close(AWBEngine engine) {
        engine._armMidiRecord(false);
    }
}

## The global engine instance.  Must be set externally during program
## initialization.
AWBEngine engine;
