## Code to render a wave-file exactly as it was recorded.

import crack.audio.wavfile readWave, ManagedWaveBuffer, WaveBuffer, WaveDef;
import crack.cont.array Array;
import crack.fs makePath, Path;
import crack.functor Functor1;
import crack.io cerr, cout, SeekableReader, SeekableWriter, StandardFormatter,
    SEEK_END, SEEK_SET;
import crack.lang Exception;
import crack.math abs;
import crash.crash createRootContext, eval, Builtin, EvalContext, Obj, ParmInfo;
import crash.types FloatObj, IntObj;

import .jack JackWrapper, SequencerWaveModel, Wave, WaveAdapter, WaveModel;
import .plugincmds makeEffectObj;
import .plugins PluginInstance, PluginLibrary;

@import crash.ann function;
@import crack.ann assert, cvars, impl;

const BYTES_PER_SAMPLE := 2;

class FileSource : WaveModel {

    WaveDef wave;
    SeekableReader src;
    int64 __dataStart;

    oper init(Path file) {
        wave = readWave(src = file.reader());
        __dataStart = src.tell();

        # Verify that the frame count appears accurate.
        src.seek(0, SEEK_END);
        expectedCount :=
            (src.tell() - __dataStart) / int64(BYTES_PER_SAMPLE * wave.channels);
        if (expectedCount != wave.frameCount && expectedCount != 0) {
            cerr I`bad frame count, expected $expectedCount, got \
                   $(wave.frameCount)\n`;
            wave.frameCount = expectedCount;
        }
        src.seek(int64(__dataStart), SEEK_SET);
    }

    void read(uint pos, WaveBuffer out, uint frames) {
        sampleCount := frames * wave.channels;
        @assert(out.cap >= sampleCount);
        src.seek(__dataStart + int64(pos) * BYTES_PER_SAMPLE * wave.channels,
                 SEEK_SET
                 );
        out.size = wave.read(src, WaveBuffer(sampleCount, out.buffer));
    }

    ## Returns the total number of frames in the wave.
    uint oper .frames() {
        return wave.frameCount;
    }

    ## Returns the number of channels in the wave.
    uint oper .channels() {
        return wave.channels;
    }

    int oper .rate() {
        return wave.rate;
    }
}

const uint32 SAMPLES_PER_CHUNK = 1024;

class Renderer {

    JackWrapper __jack = {};

    ## Current position in frames.
    uint32 __cur;

    SeekableWriter __outFile;
    WaveDef __outDef;
    float __maxClip;

    ## Master volume.
    float masterVol = 1;

    @abstract class Track {
        @cvars {
            WaveModel model;
            WaveAdapter adapter;
        }

        float oper .volume=(float val) {
            return adapter.mixer.volume = val;
        }

        float oper .gain=(float val) {
            return adapter.mixer.gain = val;
        }

        float oper .pan=(float val) {
            adapter.setPan(val);
            return val;
        }

        int oper .rate() { return model.rate }
        uint oper .frames() { return model.frames }
        void insertPlugin(PluginInstance plugin) {
            adapter.insertComponent(plugin);
        }

        @abstract void addWave(uint pos, Wave wave);
    }

    ## Track that wraps a simple wave file.
    class WaveTrack : Track {

        FileSource fsModel;

        oper init(FileSource model, WaveAdapter adapter) :
            Track(model, adapter),
            fsModel = model {
        }

        void addWave(uint pos, Wave wave) {
            throw Exception('Track is not a SequencerWaveModel');
        }
    }

    ## Track that holds a SequencerWaveModel.
    class SeqTrack : Track {
        SequencerWaveModel seqModel;
        int __rate = -1;

        oper init(SequencerWaveModel seqModel, WaveAdapter adapter) :
            Track(seqModel, adapter),
            seqModel = seqModel {
        }

        int oper .rate() {
            if (__rate == -1)
                throw Exception('Attempting to get a rate from a sequencer '
                                "track that hasn't been fully defined yet.");
            return __rate;
        }

        void addWave(uint pos, Wave wave) {
            if (__rate == -1)
                __rate = wave.rate;
            else if (wave.rate != __rate)
                throw Exception('Adding wave with a different rate to a '
                                'sequence.');
            seqModel.add(SequencerWaveModel.PositionedBuffer(pos,
                                                             wave.channels,
                                                             wave,
                                                             wave.rate
                                                             )
                         );
        }
    }

    Array[Track] __trackInfo = {};

    int oper .rate() {
        return __trackInfo[0].rate;
    }

    oper init() {
        __jack.initDumb(1024);
    }

    void insertPlugin(int track, PluginInstance plugin) {
        __trackInfo[track].insertPlugin(plugin);
    }

    void openOutput(Path file) {
        if (__outDef)
            __outDef.finish(__outFile);
        __outFile = file.writer();
        __outDef = WaveDef(2, __trackInfo[0].rate, 16);
        __outDef.writeHeader(__outFile);
    }

    ## Add the file as a wave track and return the new track index.
    int addTrack(Path filename) {
        model := FileSource(filename);
        adapter := WaveAdapter(model);
        __jack.addProcessor(adapter);
        __trackInfo.append(WaveTrack(model, adapter));
        return __trackInfo.count() - 1;
    }

    ## Create a new, empty SeqTrack and return the new track index.
    int createSeqTrack() {
        model := SequencerWaveModel();
        adapter := WaveAdapter(model);
        __jack.addProcessor(adapter);
        __trackInfo.append(SeqTrack(model, adapter));
        return __trackInfo.count() - 1;
    }

    ## Add a new wave to a sequencer track.
    ##
    ## This will cause a runtime error if the track is not a SeqTrack.
    void addWave(int track, int pos, Wave wave) {
        __trackInfo[track].addWave(pos, wave);
    }

    void __recordClip(float sample) {
        # We only care about clipping if we're writing.
        if (__outDef) {
            sample = abs(sample);
            if (sample > __maxClip)
                __maxClip = sample;
        }
    }

    void writeBuffers(uint32 frames) {

        int16 clip(Renderer rend, float sample) {
            if (sample > 1.0) {
                rend.__recordClip(sample);
                return 32767;
            } else if (sample < -1.0) {
                rend.__recordClip(sample);
                return -32767;
            } else {
                return int16(sample * 32767);
            }
        }

        outBuf := ManagedWaveBuffer(frames * 2);
        for (uint32 i; i < frames; ++i) {
            outBuf.append(clip(this, __jack.lbuf[i] * masterVol));
            outBuf.append(clip(this, __jack.rbuf[i] * masterVol));
        }

        if (__outDef)
            __outDef.writeData(__outFile, outBuf);
    }

    void forwardTo(uint32 pos) {
        while (__cur < pos) {
            size := __cur - pos > SAMPLES_PER_CHUNK ? SAMPLES_PER_CHUNK :
                                                      __cur - pos;
            __jack.processDumb(size);
            writeBuffers(size);
            __cur += size;
        }
    }

    void setVolume(int track, float volume) {
        __trackInfo[track].volume = volume;
    }

    void setPan(int track, float pan) {
        __trackInfo[track].pan = pan;
    }

    void setGain(int track, float gain) {
        __trackInfo[track].gain = gain;
    }

    ## Finish writing the current file from the remainder of all track data.
    void finish() {
        # Find the longest track.
        uint frames;
        for (track :in __trackInfo) {
            if (track.frames > frames)
                frames = track.frames;
        }

        cerr `forwarding to $frames\n`;
        forwardTo(uint32(frames));
        if (__outDef)
            __outDef.finish(__outFile);
        if (__maxClip) {
            cerr `Clipped.  Max sample is $__maxClip\n`;
            __maxClip = 0;
        }
    }

    void closeFile() {
        if (__outDef) {
            __outDef.finish(__outFile);
            __outDef = null;
        } else {
            throw Exception('"close" or "finish" called without an outfile');
        }
    }
}

PluginLibrary plugins;

## Move forward to the specified position, writing to the output file if
## "outfile" has been called
@function(Renderer) int forward(int pos) {
    @assert(pos > 0);
    self.forwardTo(uint32(pos));
    return 0;
}

## Start a new output file.
@function(Renderer) int outfile(String filename) {
    self.openOutput(makePath(filename));
    return 0;
}

## Load 'filename' into the project.  Returns the new track index.
@function(Renderer) int load(String filename) {
    return self.addTrack(makePath(filename));
}

## Create a new sequence.  Returns the new track index.
##
## Waves must be added to the sequence using "add_wave" before it can be used.
@function(Renderer) int seq() {
    return self.createSeqTrack();
}

## Adds a wave file to the specified track at the given position.
@function(Renderer) int add_wave(int track, int pos, String filename) {
    self.addWave(track, pos, Wave.read(makePath(filename).reader()));
    return 0;
}

## Set the panning for a given track index.
@function(Renderer) int pan(int track, float val) {
    self.setPan(track, val);
    return 0;
}

## Set the volume for a given track index.
@function(Renderer) int volume(int track, float val) {
    self.setVolume(track, val);
    return 0;
}

@function(Renderer) int gain(int track, float val) {
    self.setGain(track, val);
    return 0;
}

## Inserts a new effects plugin.
@function(Renderer) Obj insertEffect(int track, String name) {
    if (!plugins)
         plugins = PluginLibrary();
    plugin := plugins.getPluginByName(name);
    if (!plugin)
        throw Exception('No plugin with the specified name');
    inst := plugin.makeInstance(self.rate);
    self.insertPlugin(track, inst);
    return makeEffectObj(inst);
}

@function(Renderer) int masterVol(float val) {
    self.masterVol = val;
    return 0;
}

## Close the file ("pen up").
@function(Renderer) int close() {
    self.closeFile();
    return 0;
}

@function(Renderer) int finish() {
    self.finish();
    return 0;
}

void defineRendererFuncs(EvalContext ctx) {
    renderer := Renderer();
    ctx.define('forward', forward(renderer));
    ctx.define('outfile', outfile(renderer));
    ctx.define('load', load(renderer));
    ctx.define('seq', seq(renderer));
    ctx.define('add_wave', add_wave(renderer));
    ctx.define('pan', pan(renderer));
    ctx.define('volume', volume(renderer));
    ctx.define('gain', gain(renderer));
    ctx.define('insertEffect', insertEffect(renderer));
    ctx.define('masterVol', masterVol(renderer));
    ctx.define('close', close(renderer));
    ctx.define('finish', finish(renderer));
}
