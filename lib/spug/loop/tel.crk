## TEL (Tiny Embedded Language) wrappers for AWB.

import crack.cont.array Array;
import crack.lang Exception;
import crack.net Poller, POLLIN, POLLERR, POLLOUT;
import crack.fs makePath;
import crack.io cin, cout, FStr;
import crack.midi.event NoteOn, NoteOff, Track;
import crack.time TimeDelta;
import spug.loop.model EventManager;
import spug.loop.instrument MidiInstrument;
import spug.loop.jack WaveManager;
import tel.ast BuiltinTypes, EvalContext, Expr, IntObj, Operation, Type;
import tel.builtins ConstRefOp;
import tel.cmd_syn CmdParserFactory;
import tel.facade Interp;
import tel.prim getRegisteredType, ExtFuncOp, TypeParmCommand;
import tel.synlib Def, ParseError, ParseContext;

@import tel.ann function;

EventManager eventManager;

const ZERO := IntObj(0);

@function IntObj play() {
    eventManager.togglePlay();
    return ZERO;
}

@function IntObj get_tempo() {
    return IntObj(eventManager.tempo);
}

@function IntObj set_tempo(int tempo) {
    eventManager.tempo = tempo;
    return ZERO;
}

@function IntObj metro(int beats) {
    metroTrack := Track('Metronome');
    metroTrack.append(NoteOn(0, 9, 31, 127));
    metroTrack.append(NoteOff(1, 9, 31, 0));

    int i;
    for (i = 1; i < beats; ++i) {
        metroTrack.append(NoteOn(i * eventManager.ppb, 9, 33, 127));
        metroTrack.append(NoteOff(i * eventManager.ppb + 1, 9, 33, 127));
    }

    eventManager.addTrack(metroTrack, i * eventManager.ppb);
    return ZERO;
}

@function IntObj loadWave(String filename) {
    if (!eventManager.waveMan) {
        eventManager.waveMan = WaveManager();
        eventManager.waveMan.init();
    }
    eventManager.addWaveFile(filename);
    return ZERO;
}

@function IntObj channelConnect(int channel, int client, int port) {
    inst := MidiInstrument(eventManager.getOutPort(client, port), byte(channel));
    eventManager.instrument[channel] = inst;
    return ZERO;
}

class InterpWrapper {

    Interp __interp = {CmdParserFactory()};
    Poller __poller = {};

    oper init() {
        __interp.init();
        __poller.add(cin, POLLIN | POLLERR);

        __interp.addDef('play', play.makeFactory());
        __interp.addDef('get_tempo', get_tempo.makeFactory());
        __interp.addDef('set_tempo', set_tempo.makeFactory());
        __interp.addDef('loadWave', loadWave.makeFactory());
        __interp.addDef('metro', metro.makeFactory());
        __interp.addDef('channel_connect', channelConnect.makeFactory());
    }

    void checkForInput() {
        if (__poller.wait(TimeDelta(0, 0))) {
            data := cin.read(1024);
            try {
                result := __interp.evalString(data);
                cout `$result`;
            } catch (Exception ex) {
                cout `got error: $ex\n`;
            }
            cout `>> `;
        }
    }

    ## Run the specified script.  Discard the result.
    void runScript(String filename) {
        __interp.evalString(makePath(filename).readAll());
    }
}
