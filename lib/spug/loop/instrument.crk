# Copyright 2012 Google Inc.  All Rights Reserved.
#
# Spugloop instrument objects.  Instruments are consumers of midi events and
# use them to make sounds.

import crack.cont.array Array;
import crack.lang AssertionError;
import crack.audio.wavfile ManagedWaveBuffer;
import crack.midi.alsa Port;
import crack.midi.event ChannelEvent, ControlChange, Event, NoteOn, NoteOff,
    PitchWheel, ProgramChange;
import crack.midi.fluidsynth FluidSynth;
import .jack JackWrapper, MonoWaveTablePlayer, StereoWaveTablePlayer,
    Wave, WaveTablePlayer;

@import crack.ann interface, implements;

@interface Instrument {
    @abstract void noteOn(byte note, byte velocity);
    @abstract void noteOff(byte note);
    @abstract void programChange(byte program);
    @abstract void pitchBend(int value);
    @abstract void controlChange(byte controller, byte value);

    ## Returns the child instrument for a specific channel.
    Instrument getChild(byte channel) {
        return this;
    }

    ## Stop playing all notes.
    @abstract void stop();

    void onEvent(Event event) {
        if (no := NoteOn.cast(event, null)) {
            noteOn(no.note, no.velocity);
        } else if (no := NoteOff.cast(event, null)) {
            noteOff(no.note);
        } else if (pc := ProgramChange.cast(event, null)) {
            programChange(pc.program);
        } else if (pb := PitchWheel.cast(event, null)) {
            pitchBend(pb.value);
        } else if (cc := ControlChange.cast(event, null)) {
            controlChange(cc.controller, cc.value);
        }
    }
}

class Orchestra : Object @implements Instrument {
    # XXX I think Array may still be broken for interfaces, when I remove the
    # Inst class, we get sequencer errors.
    class Inst { Instrument i; oper init(Instrument i) : i = i {} }
    Array[Inst] __instruments;
    oper init(uint size) : __instruments(size) {}
    void append(Instrument instrument) { __instruments.append(Inst(instrument)); }
    void oper []=(uint index, Instrument instrument) {
        __instruments[index] = Inst(instrument);
    }
    void noteOn(byte note, byte velocity) {
        __instruments[0].i.noteOn(note, velocity);
    }

    void noteOff(byte note) { __instruments[0].i.noteOff(note); }

    void pitchBend(int value) { __instruments[0].i.pitchBend(value); }

    void controlChange(byte controller, byte value) {
        __instruments[0].i.controlChange(controller, value);
    }

    void programChange(byte program) {
        __instruments[0].i.programChange(program);
    }

    void onEvent(Event event) {
        if (e := ChannelEvent.cast(event, null))
            __instruments[e.channel].i.onEvent(event);
    }

    Instrument getChild(byte channel) {
        return __instruments[channel].i;
    }

    void stop() {
        for (inst :in __instruments)
            inst.i.stop();
    }
}

## An instrument that outputs its events directly to a midi port.
class MidiInstrument : Object @implements Instrument {
    Port port;
    byte channel;
    oper init(Port port, byte channel) : port = port, channel = channel {}

    void noteOn(byte note, byte velocity) {
        port.send(NoteOn(0, channel, note, velocity));
    }

    void noteOff(byte note) {
        port.send(NoteOff(0, channel, note, 0));
    }

    void programChange(byte program) {
        port.send(ProgramChange(0, channel, program));
    }

    void pitchBend(int value) {
        port.send(PitchWheel(0, channel, value));
    }

    void controlChange(byte controller, byte value) {
        port.send(ControlChange(0, channel, controller, value));
    }

    void stop() {
        # 123 - all notes off.
        port.send(ControlChange(0, channel, 123, 0));
    }
}

## An instrument that outputs its events to FluidSynth.
class FluidSynthInstrument : Object @implements Instrument {
    FluidSynth synth;
    byte channel;

    oper init(FluidSynth synth, byte channel) :
        synth = synth,
        channel = channel {
    }

    void noteOn(byte note, byte velocity) {
        synth.noteOn(channel, note, velocity);
    }

    void noteOff(byte note) {
        synth.noteOff(channel, note);
    }

    void programChange(byte program) {
        synth.programChange(channel, program);
    }

    void pitchBend(int value) {
        synth.pitchBend(channel, value);
    }

    void controlChange(byte controller, byte value) {
        # TODO: we don't currently implement controllers in fluidsynth, but we
        # should.
        if (controller == 123 && value == 0)
            stop();
    }

    void stop() {
        synth.allNotesOff(channel);
    }
}

## Instrument where each note plays a wave in a table.
class WavePlayerInstrument : Object @implements Instrument {

    WaveTablePlayer processor;

    # The midi note of the first wave in the table.  Higher notes map to
    # sequentially increasing values in the table.
    byte startNote;

    # Number of waves in the table.
    int waveCount;

    oper init(JackWrapper jack, Array[Wave] waves, uint voiceCount,
              byte startNote) :
        startNote = startNote {

        waveCount = waves.count();
        jackWaves := Array[ManagedWaveBuffer](waveCount);
        for (wave :in waves)
            jackWaves.append(wave);
        if (waves[0].channels == 1)
            processor = MonoWaveTablePlayer(voiceCount, jackWaves, 0);
        else
            processor = StereoWaveTablePlayer(voiceCount, jackWaves);
        jack.addProcessor(processor);
    }

    @final bool __noteInRange(byte note) {
        return note >= startNote && note < startNote + waveCount;
    }

    void noteOn(byte note, byte velocity) {
        if (!__noteInRange(note))
            return;
        processor.noteOn(note - startNote, velocity);
    }

    void noteOff(byte note) {
        if (!__noteInRange(note))
            return;
        processor.noteOff(note - startNote);
    }

    void programChange(byte program) {}
    void pitchBend(int value) {}
    void stop() {}
    void controlChange(byte controller, byte value) {
        if (controller == 7)
            processor.setVolume(value / 127);
    }
}
