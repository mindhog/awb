
import crack.cont.array Array;
import crack.io StringWriter, Writer;
import crack.lang AppendBuffer;
import crack.midi.event Event, MidiWriter, Track;

class Buf = AppendBuffer {
    void write4(uint32 val) {
        append(byte(val >> 24));
        append(byte(val >> 16));
        append(byte(val >> 8));
        append(byte(val));
    }

    void write2(uint16 val) {
        append(byte(val >> 8));
        append(byte(val));
    }
}

class MidiFile {

    uint ticksPerQN;
    float bpm;
    Array[Track] __tracks = Array[Track]();

    ## ticksPerQN: Ticks per quarter note.  The high bit must be zero,
    ##             otherwised this has a different meaning when stored to the
    ##             file.
    oper init(uint ticksPerQN, float bpm) :
        ticksPerQN = ticksPerQN,
        bpm = bpm {
    }

    void append(Track track) {
        __tracks.append(track);
    }

    ## Write a midi file.
    void write(Writer out) {
        buf := Buf(AppendBuffer(14));
        buf.extend('MThd');
        buf.write4(6);  # size of the chunk
        buf.write2(1);  # Format 1
        buf.write2(uint16(__tracks.count()));
        buf.write2(uint16(ticksPerQN));

        # convert beats per minute to microseconds per beat
        msecsPerBeat := uint(6e+7 / float(bpm));

        for (track :in __tracks) {
            # Serialize the set tempo event.  This really only needs to happen
            # for the first track.
            dest := StringWriter();
            midiWriter := MidiWriter(dest);
            midiWriter.encodeVarLen(0);  # Time.
            midiWriter.write(0xff);  # Synthetic event 0x51
            midiWriter.write(0x51);
            midiWriter.write(3);  # Number of bytes.
            midiWriter.write(byte(msecsPerBeat >> 16));  # msecs per beat.
            midiWriter.write(byte(msecsPerBeat >> 8));
            midiWriter.write(byte(msecsPerBeat));

            # Serialize the track.
            track.writeTo(midiWriter);
            midiWriter.flush();
            serializedTrack := dest.string();

            # Add it to the buffer.
            buf.extend('MTrk');
            buf.write4(uint32(serializedTrack.size));
            buf.extend(serializedTrack);
        }

        # Finally, write the buffer.
        out.write(buf);
    }
}
