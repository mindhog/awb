
import crack.cont.array Array;
import crack.io BufferReader, FStr, StringWriter, Reader, Writer;
import crack.lang AppendBuffer, Buffer, Exception;
import crack.midi.event Event, MetaEvent, MidiReader, MidiWriter, Track;

class RBuf = Buffer {
    uint32 read4(uint pos) {
        return (uint32(this[pos]) << 24) |
               (uint32(this[pos + 1]) << 16) |
               (uint32(this[pos + 2]) << 8) |
               uint32(this[pos + 3]);
    }

    uint32 read2(uint pos) {
        return (uint32(this[pos]) << 8) |
               uint32(this[pos + 1]);
    }
}

class Buf = AppendBuffer {
    void write4(uint32 val) {
        append(byte(val >> 24));
        append(byte(val >> 16));
        append(byte(val >> 8));
        append(byte(val));
    }

    void write2(uint16 val) {
        append(byte(val >> 8));
        append(byte(val));
    }
}

class BadFileFormat : Exception {
    oper init(String text) : Exception(text) {}
}

class MidiFile {

    uint ticksPerQN;
    float bpm;
    Array[Track] __tracks = Array[Track]();

    ## ticksPerQN: Ticks per quarter note.  The high bit must be zero,
    ##             otherwised this has a different meaning when stored to the
    ##             file.
    oper init(uint ticksPerQN, float bpm) :
        ticksPerQN = ticksPerQN,
        bpm = bpm {
    }

    void append(Track track) {
        __tracks.append(track);
    }

    ## Returns the set of tracks in the file.
    ##
    ## The returned array should be treated as immutable.
    Array[Track] oper .tracks() { return __tracks }

    ## Write a midi file.
    void write(Writer out) {
        buf := Buf(AppendBuffer(14));
        buf.extend('MThd');
        buf.write4(6);  # size of the chunk
        buf.write2(1);  # Format 1
        buf.write2(uint16(__tracks.count()));
        buf.write2(uint16(ticksPerQN));

        # convert beats per minute to microseconds per beat
        usecsPerBeat := uint(6e+7 / float(bpm));

        for (track :in __tracks) {
            # Serialize the set tempo event.  This really only needs to happen
            # for the first track.
            dest := StringWriter();
            midiWriter := MidiWriter(dest);
            midiWriter.encodeVarLen(0);  # Time.
            midiWriter.write(0xff);  # Synthetic event 0x51
            midiWriter.write(0x51);
            midiWriter.write(3);  # Number of bytes.
            midiWriter.write(byte(usecsPerBeat >> 16));  # usecs per beat.
            midiWriter.write(byte(usecsPerBeat >> 8));
            midiWriter.write(byte(usecsPerBeat));

            # Serialize the track.
            track.writeTo(midiWriter);
            midiWriter.flush();
            serializedTrack := dest.string();

            # Add it to the buffer.
            buf.extend('MTrk');
            buf.write4(uint32(serializedTrack.size));
            buf.extend(serializedTrack);
        }

        # Finally, write the buffer.
        out.write(buf);
    }

    ## Read a midi file.
    @static MidiFile read(Reader src) {
        header := RBuf(src.read(14));
        if (!header.startsWith('MThd'))
            throw BadFileFormat("Doesn't start with an MThd header");

        if (header.read4(4) != 6)
            throw BadFileFormat('Invalid chunk size (expecting 6)');

        if (header.read2(8) != 1)
            throw BadFileFormat('Invalid midi file format (we only support '
                                'format 1)');

        numTracks := header.read2(10);
        ticksPerQN := header.read2(12);
        int usecsPerBeat = -1;
        result := MidiFile(ticksPerQN, 0);

        for (int i = 0; i < numTracks; ++i) {
            header := src.read(8);
            if (!header.startsWith('MTrk'))
                throw BadFileFormat(
                    FStr() `Track header expected, got $(header.getRepr())`
                );

            # Read in the whole track and use it as the input for a MidiReader.
            trackSize := (uint32(header[4]) << 24) |
                         (uint32(header[5]) << 16) |
                         (uint32(header[6]) << 8) |
                         uint32(header[7]);
            reader := MidiReader(BufferReader(src.read(trackSize)));
            track := reader.readTrack(FStr() `$i`);

            # Process certain meta events.
            bool gotNonMetaEvents;
            for (event :in track) {
                if (meta := MetaEvent.cast(event, null)) {
                    if (meta.action == 0x51) {
                        # Tempo event.
                        if (meta.contents.count() != 3)
                            throw BadFileFormat(
                                FStr() I`Expected set tempo event size of 3, \
                                         got $(meta.contents.getRepr())`
                            );

                        tempo := (uint(meta.contents[0]) << 16) |
                                 (uint(meta.contents[1]) << 8) |
                                 uint(meta.contents[2]);

                        if (usecsPerBeat == -1) {
                            usecsPerBeat = tempo;
                        } else if (usecsPerBeat != tempo) {
                            throw BadFileFormat(
                                FStr() I`Mismatched tempo specified for track \
                                         $i, previously got $usecsPerBeat, \
                                         new values is $tempo`
                            );
                        }
                    } else if (meta.action == 3) {
                        # Track name.
                        track.name = meta.contents;
                    }
                } else {
                    gotNonMetaEvents = true;
                }
            }

            # Make sure we got at least one set-tempo event.
            if (usecsPerBeat == -1)
                throw BadFileFormat('No set-tempo event found in first track');

            if (gotNonMetaEvents)
                result.append(track);
        }

        result.bpm = 6e+7 / float(usecsPerBeat);
        return result;
    }
}
