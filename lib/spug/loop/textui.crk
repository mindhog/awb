
import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.termui Event, KeyEvent, TermApp, Window, KEY_UP, KEY_DOWN,
    KEY_LEFT, KEY_RIGHT, KEY_PGUP, KEY_PGDN, KEY_BACKSPACE, KEY_ENTER,
    KEY_ESC, KEY_SPACE;
import crack.functor Functor0, Functor1, Functor2;
import crack.io cerr, cout, FStr, StandardFormatter, StringFormatter;
import crack.lang AppendBuffer, Exception;
import crack.net Poller;
import crack.net.pollqueue PollQueue;
import crash createRootContext, eval, parseBlockArg, parseString, Block,
    Builtin, EvalContext, Obj, ObjOf, SimpleValue;
import deadly.entry Entry;
import deadly.layout Column, Container, Frame, Row;
import deadly.termlist List;
import repl repl;
import .engine engine, AWBEngine;
import .model Controller;
import .midieng MidiEngine, TimeCallback, TimeEvent;
import .tel AppMethods, CrashCallback, InterpWrapper;

import types FloatObj, IntObj;
@import ann function;

@import crack.ann cvars, impl, implements, interface;

class AppContext {}

alias BindingMap = HashMap[int, Functor1[bool, AppContext]];

BindingMap appBindings = BindingMap();

## This flag may be set by external modules, if true standard-error is
## captured and stored in a string when we bring up the terminal UI.
bool captureCerr = true;

class App : TermApp {
    AppContext __context;

    oper init(AppContext context) : __context = context {}

    void onEvent(Event event) {
        if (ke := KeyEvent.cast(event, null)) {
            if ((cb := appBindings.get(ke.key)) && cb(__context))
                return;
            else if (ke.key == b'q')
                terminate();
        }

        TermApp.onEvent(event);
    }
}

class Status : Window {

    byte normalAttr = 7;
    String text = 'AWB';

    oper init(Window parent) : Window(parent) {}

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, normalAttr, b' ');
        gc.write(0, 0, normalAttr, text);
    }
}

class TrackList : List {
    @final void reloadTracks() {
        model = Array[String]();
        for (track :in engine.getCurrentSection().tracks)
            model.append(track.name);
    }

    oper init(Window parent) : List(parent, Array[String]()) {
        reloadTracks();
    }

    void trackAdded() {
        model.append(engine.getCurrentSection().tracks[-1].name);
    }

    void waveAdded() {
        model.append(engine.getCurrentSection().waves[-1].name);
    }

    void trackDeleted() {
        reloadTracks();
    }

    @function(TrackList) int getSelection() {
        return self.selection;
    }

    @function(TrackList) int setSelection(int index) {
        self.selection = index;
        return index;
    }
}

## Command to bind a key event to a block.
##
## WidgetType is a crack.exp.termui Window that has a method bind(int,
## KeyCallback[WidgetType]).
class BindCmd[WidgetType]  : Builtin {
    @cvars {
        WidgetType innerSelf;
        ObjOf[WidgetType] self;
    }

    String getDoc() {
        return FStr() I`\
            bind <key-code:int> <block:str> -- bind a key to a block.

            Bind the key code to the specified block.  The block will be
            evaluated whenever the key is pressed and the widget has the
            focus.

            If the block evaluates to "true" then no further callbacks are
            called.

            The following variables are defined within the block context:

                self: The widget.
                event: The event.
            `;
    }

    Object invoke(EvalContext ctx, Array[Object] args) {
        if (args.count() != 2)
            throw Exception('"bind" requires int, block');
        key := IntObj.convert(args[0]).val;
        block := parseBlockArg(args, 1);

        ctx.pushFuncFrame();
        ctx.define('self', self);
        innerSelf.bind(key, KeyCallback[WidgetType](EvalContext(ctx), block));
        ctx.popFuncFrame();

        return IntObj(0);
    }
}

## The BarSlider is a horizontal single bar graph window that displays two
## ranges: the value range (using the value attribute, red by default) and
## the controller range (using the controller attribute, blue by default).
## If the two values are equal they are displayed in the sync attribute
## (green by default).
class BarSlider : Window {

    float __value, __controller;
    byte backgroundAttr = 0,
        valueAttr = 0x10,
        controllerAttr = 0x40,
        syncAttr = 0x20;

    oper init(Window parent) : Window(parent) {}

    float oper .value=(float value) { return __value = value }
    float oper .controller=(float controller) {
        return __controller = controller;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, backgroundAttr, b' ');

        # Paint the bars from largest to smallest so that we
        if (__value == __controller) {
            gc.fillRect(0, 0, int(__value * width), height, syncAttr, b' ');
        } else if (__value < __controller) {
            gc.fillRect(0, 0, int(__controller * width), height,
                        controllerAttr,
                        b' '
                        );
            gc.fillRect(0, 0, int(__value * width), height, valueAttr, b' ');
        } else {
            gc.fillRect(0, 0, int(__value * width), height, valueAttr, b' ');
            gc.fillRect(0, 0, int(__controller * width), height,
                        controllerAttr,
                        b' '
                        );
        }
    }
}

## If "parent" is a container, add the child to it with the given size.
void addToContainer(Window parent, Window child, int size) {
    if (container := Container.cast(parent, null))
        container.addChild(child, size);
}

@function Obj makeBarSlider(Window parent, int size) {
    @function(BarSlider) float setValue(float value) {
        self.value = value;
        return value;
    }

    @function(BarSlider) float setController(float controller) {
        self.controller = controller;
        return controller;
    }

    self := BarSlider(parent);
    addToContainer(parent, self, size);
    result := ObjOf[BarSlider](self);
    result.define('setValue', setValue(self));
    result.define('setController', setController(self));
    return result;
}

class StatefulText : Window {
    byte
        backgroundAttr = 0,
        unfocusedAttr = 7,
        normalAttr = 0xF;

    String text;

    HashMap[int, Functor2[bool, StatefulText, Event]] __callbacks = {};

    oper init(Window parent, String text) : Window(parent), text = text {}

    void bind(int key, Functor2[bool, StatefulText, Event] callback) {
        __callbacks[key] = callback;
    }

    bool onEvent(Event event) {
        if (ke := KeyEvent.cast(event, null)) {
            cb := __callbacks.get(ke.key);
            if (cb)
                return cb(this, event);
        }
        return false;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, backgroundAttr, b' ');
        gc.write(0, 0, getFocus() ? normalAttr : unfocusedAttr, text);
    }
}

alias StatefulTextObj = ObjOf[StatefulText];

class KeyCallback[WidgetType] @impl Functor2[bool, WidgetType, Event] {
    @cvars {
        EvalContext context;
        Block block;
    }

    bool oper call(WidgetType widget, Event event) {
        ctx := EvalContext(context);
        ctx.pushFuncFrame();
        ctx.define('event', SimpleValue(event));
        Object result;
        try {
            result = block.evaluate(ctx);
        } catch (Exception ex) {
            ctx.popFuncFrame();
            throw ex;
        }
        ctx.popFuncFrame();

        return result;
    }
}

@function StatefulTextObj makeStatefulText(Window parent, int size, String text) {
    @function(StatefulText) String getText() {
        return self.text;
    }

    @function(StatefulText) String setText(String val) {
        return self.text = val;
    }

    @function(StatefulText) int getBackgroundAttr() {
        return self.backgroundAttr;
    }

    @function(StatefulText) int setBackgroundAttr(int attr) {
        return self.backgroundAttr = byte(attr);
    }

    @function(StatefulText) int getUnfocusedAttr() {
        return self.unfocusedAttr;
    }

    @function(StatefulText) int setUnfocusedAttr(int attr) {
        return self.unfocusedAttr = byte(attr);
    }

    @function(StatefulText) int getNormalAttr() {
        return self.normalAttr;
    }

    @function(StatefulText) int setNormalAttr(int attr) {
        return self.normalAttr = byte(attr);
    }

    self := StatefulText(parent, text);
    addToContainer(parent, self, size);
    result := ObjOf[StatefulText](self);
    result.define('bind', BindCmd[StatefulText](self, result));
    result.define('getText', getText(self));
    result.define('setText', setText(self));
    result.define('setBackgroundAttr', setBackgroundAttr(self));
    result.define('getBackgroundAttr', getBackgroundAttr(self));
    result.define('getUnfocusedAttr', getUnfocusedAttr(self));
    result.define('setUnfocusedAttr', setUnfocusedAttr(self));
    result.define('getNormalAttr', getNormalAttr(self));
    result.define('setNormalAttr', setNormalAttr(self));
    return result;
}

## Make a "Row" layout control, which manages a row of child windows.
@function Row makeRow(Window parent, int size) {
    self := Row(parent);
    addToContainer(parent, self, size);
    return self;
}

## Make a "Column" layout control, which manages a row of child windows.
@function Column makeColumn(Window parent, int size) {
    self := Column(parent);
    addToContainer(parent, self, size);
    return self;
}

alias ObjOfFrame = ObjOf[Frame];

## Create a frame window, which can be used to present one of a number of
## child windows.
@function ObjOfFrame makeFrame(Window parent, int size) {

    @function(Frame) int setParcel(Window parcel) {
        self.parcel = parcel;
        return 0;
    }

    @function(Frame) Window getParcel() {
        return self.parcel;
    }

    self := Frame(parent);
    addToContainer(parent, self, size);
    result := ObjOf[Frame](self);
    result.define('setParcel', setParcel(self));
    result.define('getParcel', getParcel(self));
    return result;
}

## A message sent to the text controller with "send()".  These can be used to
## safely make changes to textui objects from other threads.
@interface Message {
    @abstract void run();
}

alias MessageQueue = PollQueue[Message];

class TimeBar : Window {

    byte normalAttr = 7;

    uint time;

    void onTimeEvent(TimeEvent event);

    class TimeMessage @impl Message {
        @cvars {
            TimeBar timeBar;
            TimeEvent event;
        }

        void run() { timeBar.onTimeEvent(event) }
    }

    class MyTimeCallback @impl TimeCallback {
        @cvars {
            TimeBar timeBar;
            MessageQueue __queue;
        }

        void oper call(TimeEvent event) {
            __queue.add(TimeMessage(timeBar, event));
        }
    }

    oper init(Window parent) : Window(parent) {}

    @static TimeBar create(Window parent, MessageQueue queue,
                           MidiEngine midiEng) {
        result := TimeBar(parent);
        midiEng.subscribeTimeEvent(MyTimeCallback(result, queue));
        return result;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, normalAttr, b' ');
        gc.write(0, 0, normalAttr, FStr() `$time`);
    }

    void onTimeEvent(TimeEvent event) {
        time = uint(event.usecs / 1000);
    }
}

class CallbackWrapper @impl Functor1[bool, AppContext] {
    @cvars {
        Functor0[void] callback;
    }
    bool oper call(AppContext ctx) {
        callback();
        return true;
    }
}

@function(Window) int setFocus(int focused) {
    self.setFocus(focused);
    return 0;
}

alias EntryObj = ObjOf[Entry];

## Create an Entry control (a single line entryfield).
@function EntryObj makeEntry(Window parent, int size) {

    @function(Entry) String getText() {
        return String(self.model);
    }

    @function(Entry) int setText(String text) {
        if (text.count() > self.model.size)
            self.model.grow(text.count());
        self.model.move(0, text);
        self.model.size = text.count();
        if (self.pos > text.count())
            self.pos = text.count();
        if (self.start > self.pos)
            self.start = self.pos;
        return 0;
    }

    buf := AppendBuffer(256);
    entry := Entry(parent, buf);
    addToContainer(parent, entry, size);
    result := EntryObj(entry);
    result.define('bind', BindCmd[Entry](entry, result));
    result.define('getText', getText(entry));
    result.define('setText', setText(entry));
    result.define('setFocus', setFocus(entry));
    return result;
}

alias ListObj = ObjOf[List];

## Create a List control.
@function ListObj makeList(Window parent, int size) {

    @function(List) int add(String entry) {
        self.model.append(entry);
        return 0;
    }

    model := Array[String]();
    list := List(parent, model);
    addToContainer(parent, list, size);
    result := ListObj(list);
    result.define('bind', BindCmd[List](list, result));
    result.define('add', add(list));
    result.define('setFocus', setFocus(list));
    return result;
}

alias MQCallback = MessageQueue.Callback;

class TextController : Object @implements Controller, AppMethods {
    InterpWrapper __interp;

    ## List of track list windows.
    Array[TrackList] __trackLists = {};

    ## The app.
    App __app;

    ## The status bar.
    Status __status;

    ## The poller for the UI.
    Poller __poller = Poller();

    ## The messge queue for communicating with UI components.
    MessageQueue __controlQueue;

    @static void __processMessage(Message message) {
        message.run();
    }

    oper init() {
        __controlQueue =
            MessageQueue(MessageQueue.Callback.Wrap(__processMessage));
        __controlQueue.addTo(__poller);
    }

    void changeState(int oldState, int newState) {
        cout `Changing state from $oldState to $newState\n`;
    }

    void trackAdded() {
        for (tl :in __trackLists)
            tl.trackAdded();
    }

    void waveAdded() {
        for (tl :in __trackLists)
            tl.waveAdded();
    }

    void trackDeleted(uint index) {
        for (tl :in __trackLists)
            tl.trackDeleted();
    }

    void sectionCreated() {
        cout `section created\n`;
    }

    void sectionChanged() {
        cout `section changed\n`;
    }

    void setBinding(int key, Functor0[void] callback) {
        appBindings[key] = CallbackWrapper(callback);
    }

    void setInterp(InterpWrapper interp) {


        class RunUI : Builtin {
            String getDoc() {
                return I"\
                    Run the user interface.

                    'block' is a crash block to execute in a subcontext that
                    exists for the duration of the time that the user
                    interface is running.
                    ";
            }

            @cvars {
                TextController self;
            }

            Object invoke(EvalContext context, Array[Object] args) {
                if (args.count() != 1)
                    throw Exception('runUI accepts one argument');
                block := parseBlockArg(args, 0);

                self.__app = App(AppContext());
                self.__app.showCursor(false);
                self.__app.start();
                col := Column(self.__app);
                self.__status = Status(col);
                col.addChild(self.__status, 1);

                StandardFormatter tempOut = cout, tempErr = cerr;
                cout = StringFormatter();
                if (captureCerr)
                    cerr = StringFormatter();

                Exception error;
                try {
                    context.pushFuncFrame();
                    context.define('mainColumn', SimpleValue(col));
                    block.evaluate(context);
                    self.__app.run(self.__poller);
                } catch (Exception ex) {
                    error = ex;
                }

                cout = tempOut;
                if (tempErr !is cerr)
                    cerr = tempErr;

                context.popFuncFrame();
                self.__trackLists.clear();
                self.__app.showCursor(true);
                self.__app.stop();
                self.__status = null;
                self.__app = null;

                if (error)
                    cerr `$error\n`;
                return null;
            }
        }

        alias TrackListObj = ObjOf[List];

        @function(TextController)
        TrackListObj makeTrackList(Window parent, int size) {
            list := TrackList(parent);
            addToContainer(parent, list, size);
            result := TrackListObj(list);
            result.define('getSelection', TrackList.getSelection(list));
            result.define('setSelection', TrackList.setSelection(list));
            result.define('bind', BindCmd[List](list, result));
            self.__trackLists.append(list);
            return result;
        }

        @function(TextController)
        TimeBar makeTimeBar(Window parent, int size,
                            AWBEngine engine
                            ) {
            timeBar := TimeBar.create(parent, self.__controlQueue,
                                      engine.getMidiEngine());
            if (cont := Container.cast(parent, null))
                cont.addChild(timeBar, size);
            return timeBar;
        }

        @function(TextController)
        int setStatusText(String text) {
            if (self.__status)
                self.__status.text = text;
            return 0;
        }

        @function(TextController)
        int terminate() {
            self.__app.terminate();
            return 0;
        }

        @function(InterpWrapper) int bind(int key, String command) {
            appBindings[key] = CallbackWrapper(
                CrashCallback(self.getRootContext(), parseString(command))
            );
            return 0;
        }

        ## Returns the ascii character number for the first character in 'name'
        @function int char(String name) {
            if (!name)
                throw Exception('Key name must not be null or empty.');
            return name[0];
        }

        SimpleValue ival(int value) {
            return SimpleValue(IntObj(value));
        }

        __interp = interp;
        __interp.define('runUI', RunUI(this));
        __interp.define('StatefulText', makeStatefulText());
        __interp.define('Row', makeRow());
        __interp.define('Column', makeColumn());
        __interp.define('Frame', makeFrame());
        __interp.define('Entry', makeEntry());
        __interp.define('List', makeList());
        __interp.define('TrackList', makeTrackList(this));
        __interp.define('TimeBar', makeTimeBar(this));
        __interp.define('BarSlider', makeBarSlider());
        __interp.define('setStatusText', setStatusText(this));
        __interp.define('terminate', terminate(this));
        __interp.define('bind', bind(__interp));
        __interp.define('char', char());
        __interp.define('KEY_UP', ival(KEY_UP));
        __interp.define('KEY_DOWN', ival(KEY_DOWN));
        __interp.define('KEY_LEFT', ival(KEY_LEFT));
        __interp.define('KEY_RIGHT', ival(KEY_RIGHT));
        __interp.define('KEY_PGUP', ival(KEY_PGUP));
        __interp.define('KEY_PGDN', ival(KEY_PGDN));
        __interp.define('KEY_BACKSPACE', ival(KEY_BACKSPACE));
        __interp.define('KEY_ENTER', ival(KEY_ENTER));
        __interp.define('KEY_ESC', ival(KEY_ESC));
        __interp.define('KEY_SPACE', ival(KEY_SPACE));
    }

    void run() {
        __interp.doREPL();
    }
}
