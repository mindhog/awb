import crack.cont.array Array;
import crack.ext._jack JackClient;
import crack.functor Functor2;
import crack.io cerr, FileHandle;
import crack.lang Exception;
import crack.math floor;
import crack.midi.alsa Port, Sequencer, SND_SEQ_OPEN_OUTPUT,
    SND_SEQ_OPEN_INPUT;
import crack.midi.event ChannelEvent, ControlChange, Event, MidiWriter, Track;
import crack.net Poller, PollEvent, PollEventCallback, POLLOUT, POLLIN;
import crack.rawptr RawPtr;
import crack.runtime sleep, PollEvt, PollSet;
import crack.threads Thread;
import crack.time TimeDelta;
import spug.loop.jack JackPos, JackWrapper, WaveManager, JACK_TRANSPORT_ROLLING;
import spug.loop.model LoopCursor, Section;

@import crack.ann cvars, impl, interface;

class MidiSequencer;

## EventProcessors are called whenever the MidiEngine receives an event.  They
## are called synchronously and therefore must be able to deal with the event
## in a small bounded amount of time.
alias EventProcessor = Functor2[void, MidiSequencer, Event];

const MAX_TIME := 0xffffffff;

# TODO:
# - Keep track of what notes are playing, silence them all on stop.

# Engine states.
const int
    ST_IDLE = 0,
    ST_PLAY = 1,

    ## Latched for record (first event will start the recording)
    ST_LATCHED = 2,
    ST_RECORD = 3;

## Interface to wrap jack interactions.
@interface Jack {
    @abstract void start();
    @abstract void stop();
    @abstract int getTransportState(JackPos pos);

    ## Set the current time position to 'secs' seconds since the beginning of
    ## all tracks.
    @abstract void setTime(float secs);

    ## Returns the current time.
    @abstract float getTime();

    ## True if there are any tracks in the wave manager, false if it's empty.
    @abstract bool hasTracks();
}

@final class MidiSequencer {

    # If this is specified, the channel of all input events is rewritten to
    # the value specified.
    int inputChannel = -1;

    Sequencer __seq;
    Jack __jack;

    # Last known state information of the jack transport.
    JackPos __pos = JackPos();
    int __transportState;
    # True if __pos and __transportState are valid.
    bool __posIsValid;

    EventProcessor __processor;

    ## The track we're currently recording.  If this is non-null and the
    ## transport is rolling, we're recording.  Otherwise we're not.
    Track __recordTrack;

    Section __section = Section();

    Array[LoopCursor] __trackCursors;

    ## Start time of the transport in microseconds (when we started jack
    ## rolling).
    ## This is currently also the start time of the first play of the section
    ## in microseconds, which is really more what we want.
    uint64 __startTime;

    ## Current engine state (see the ST_* constants above).
    int __state;

    ## We're currently doing this based on 60bpm (1 bps) where ticks per beat
    ## is 5 * 9 * 32 (1440).
    float __ticksPerSecond = 1440;

    # Temporary hack so I can get ports working.
    Port outPort;

    ## Updates the variables that we use to store the current jack state
    ## (initially this is only the "transport state" and position.
    @final void __updateJackState() {
        if (!__posIsValid) {
            lastState := __transportState;
            __transportState = __jack.getTransportState(__pos);
            __posIsValid = true;
        }
    }

    ## Return the time in midi ticks relative to the beginning of the last
    ## iteration of the section.
    ##
    ## This relies on the validity of the current time position structure as
    ## determined by the processing loop.
    @final uint __getTicks(uint span) {
        __updateJackState();
        absTicks := uint(__ticksPerSecond * float(__pos.usecs - __startTime) /
                         1000000.0
                         );
        if (span)
            absTicks = absTicks % span;
        return absTicks;
    }

    ## Compute the new start time to use at the beginning of a record.
    ## This modifies __startTime to be the new start time.
    @final void __computeStartTime() {
        if (!__startTime || !__section.span) {
            # We haven't yet set start time or don't yet have a span, so just
            # use the current time as the start time.
            __startTime = __pos.usecs;
        } else {
            spanInSeconds := float(__section.span) / __ticksPerSecond;

            # Calculate the number of cycles that have elapsed since the last
            # start time.
            cycles := float(__pos.usecs - __startTime) / 1000000.0 /
                      spanInSeconds;

            # The new start time is the beginning of the last cycle
            __startTime += uint64(floor(cycles) * spanInSeconds * 1000000.0);
        }
    }

    @final void __initializeTrackCursors() {
        __trackCursors = Array[LoopCursor](__section.tracks.count());
        for (track :in __section.tracks) {
            __trackCursors.append(cur := LoopCursor(track));
            cur.setPos(__getTicks(cur.span));
        }
    }

    ## Set all track cursors so that the next event is the event to be played
    ## at or after 'pos'.  'pos'
    @final void __setTrackCursors(uint pos) {
        # Recreate the track cursors (this should be refactored out).
        __trackCursors = Array[LoopCursor](__section.tracks.count());
        for (track :in __section.tracks)
            __trackCursors.append(LoopCursor(track));

        for (cur :in __trackCursors) {
            # Find the first event that is after 'pos'.
            startIndex := cur.index;
            while (cur.elem().time < pos % cur.span) {
                cur.next();
                if (cur.index == startIndex) {
                    # XXX doesn't look like we ever actually see this.
                    break;
                }
            }
        }
    }

    void __playPendingEvents(LoopCursor cur, uint pos) {
        while (cur && !cur.immediatelyFollows(pos % cur.span)) {
            # Send it off to the processor.
            __processor(this, cur.next());
        }
    }

    @final void __processEvent(Event event) {
        if (inputChannel > -1 && event := ChannelEvent.cast(event, null))
            event.channel = byte(inputChannel);

        # Some hacks to get everything working.
        if (cc := ControlChange.cast(event, null)) {

            # CC 45 is the "record" button for the Korg nanokontrol.  So
            # basically this clause starts midi recording (and switches to
            # play mode if we're already recording)
            if (cc.controller == 45) {

                # Ignore "button up" events.
                if (cc.value != 127)
                    return;

                # If we're currently recording, move the record track into the
                # current section and switch to play mode.
                if (__recordTrack) {
                    cerr `midieng: saving recorded track\n`;
                    t := __getTicks(0);
                    __section.markEnding(__recordTrack, t, true);
                    __section.tracks.append(__recordTrack);
                    __recordTrack = null;
                    __state = ST_PLAY;

                    # Update the track cursors now that we have a new one, then
                    # deal with any events that now need to be played immediately.
                    __setTrackCursors(__getTicks(__section.span));
                    for (cur :in __trackCursors)
                        __playPendingEvents(cur, t);
                } else {
                    # Create a record track, make sure the transport is
                    # rolling.
                    cerr `midieng: Starting record\n`;
                    __recordTrack = Track('noname');
                    if (__transportState != JACK_TRANSPORT_ROLLING) {
                        __jack.start();
                        __updateJackState();
                    }
                    __computeStartTime();
                    # If there are no tracks, we started out in "latched"
                    # state, otherwise go directly to "record".
                    __state = (__section.span || __jack.hasTracks()) ?
                                  ST_RECORD :
                                  ST_LATCHED;
                }

                return;
            } else if (cc.controller == 43) {
                # Temporarily binding nano's "<<" key to something that clears
                # everything out.
                __recordTrack = null;
                __section = Section();
                __startTime = 0;
                __trackCursors = null;
                __jack.stop();
                return;
            } else if (cc.controller == 41) {
                # Control 41 is the "play" button, so have it toggle play.
                if (cc.value != 127)
                    return;
                if (__transportState == JACK_TRANSPORT_ROLLING) {
                    # Currently playing.  Stop.
                    __jack.stop();
                    __state = ST_IDLE;
                    __startTime = 0;
                } else {
                    __jack.start();
                    __jack.setTime(0);
                    __startTime = __pos.usecs;
                    __setTrackCursors(0);
                    for (cur :in __trackCursors)
                        __playPendingEvents(cur, /* ticks = */ 0);
                }
                return;
            }
        }

        if (__processor)
            __processor(this, event);

        # This probably belongs in the event processor.
        if (!(__recordTrack is null)) {

            # If we don't currently have any events in the record track,
            # this is the first event and we want to recompute the start
            # time and then reset the event time to the new start time.
            if (__state == ST_LATCHED) {
                __computeStartTime();
                event.time = __getTicks(0);
                __state = ST_RECORD;
            }

            __recordTrack.append(event);
        }
    }

    oper init(Jack jack, Sequencer seq) :
        __jack = jack,
        __seq = seq {
    }

    class EventHandler @impl PollEventCallback {
        Sequencer __seq;
        RawPtr[MidiSequencer] __engine;

        oper init(MidiSequencer engine, Sequencer seq) :
            __engine = RawPtr[MidiSequencer](engine),
            __seq = seq {
        }

        int oper call(Poller poller, PollEvent evt) {
            while (__seq.hasEvent()) {
                evt := __seq.getEvent();
                if (evt) {
                    evt.time = __engine.__getTicks(0);
                    cerr `got midi event $evt, time is $(evt ? evt.time : 0)\n`;
                    __engine.__processEvent(evt);
                } else {
                    cerr `got null event\n`;
                }
            }
            return POLLIN;
        }
    }

    ## timeoutObj: this is neither an input nor an output parameter, we just
    ## pass one of these in from the caller to avoid having to allocate one
    ## for each cycle.
    void runOneCycle(Poller poller, TimeDelta timeoutObj) {
        __updateJackState();

        TimeDelta timeout;
        if (__transportState == JACK_TRANSPORT_ROLLING) {
            # See if we need to play anything.
            if (__section.tracks) {
                # if we don't currently have a set of cursors, generate
                # them now.
                if (!__trackCursors) {
                    __initializeTrackCursors();
                }

                # Get the current tick.
                tick := __getTicks(__section.span);

                # Play all events that are due to be played.
                uint nextEventTime = MAX_TIME;
                for (cur :in __trackCursors) {
                    # safety check
                    if (!cur.span)
                        continue;

                    # play all events up to that point
                    __playPendingEvents(cur, tick);

                    # Figure out how many ticks until the next event
                    # (we do the span offsetting to deal with events that
                    # happen in the next iteration of the loop)
                    spanTick := tick % cur.span;
                    diff := (cur.elem().time < spanTick ? cur.span : 0) +
                            cur.elem().time - spanTick;
                    if (diff < nextEventTime)
                        nextEventTime = diff;
                }

                # If we need to schedule a next event time for playback,
                # set the timeout TimeDelta structure accordingly.
                if (nextEventTime < MAX_TIME) {
                    # Figure out the duration of a tick.
                    delta := float(nextEventTime) / __ticksPerSecond;
                    timeoutObj.secs = int32(delta);
                    timeoutObj.nsecs = int32((delta - floor(delta)) *
                                             1000000000.0);
                    timeout = timeoutObj;
                }
            }
        }



        # We're going to wait now, so invalidate the jack transport state.
        __posIsValid = false;
        poller.waitAndProcess(timeout);
    }

    void registerHandlers(Poller poller) {
        count := __seq.seq.poll_descriptors_count(POLLIN);
        fds := PollSet(count);
        rc := __seq.seq.poll_descriptors_vp(fds, count, POLLIN);

        evt := PollEvt();
        for (int i = 0; i < count; ++i) {
            fds.get(i, evt);
            cerr `fd $(evt.fd) events $(evt.events)\n`;
            poller.add(FileHandle(evt.fd), EventHandler(this, __seq));
        }
    }

    void _run() {
        # Create the event handlers for incoming MIDI events.
        poller := Poller();
        registerHandlers(poller);

        # Set the time of the wave audio to the beginning.
        __jack.setTime(0);

        # This is the TimeDelta structure that we'll populate and reuse for
        # the poll timeout.  If the transport is rolling and there are events,
        # this will be populated with the time of the next event and 'timeout'
        # will be pointed at this object.  Otherwise, we'll use a timeout of
        # null.
        timeoutObj := TimeDelta();

        # The main event loop.
        cerr `starting loop\n`;
        while (true) {
            try {
                runOneCycle(poller, timeoutObj);
            } catch (Exception ex) {
                cerr `Got exception in run thread:\n$ex\n`;
            }
        }
    }

    # All of the following methods are part of the public interface of the
    # engine which can be called by any thread.  They need to be
    # reimplemented to queue events to be processed by the engine thread.

    ## Add a processor to the midi engine.  This will get called whenever an
    ## event is received.
    void addProcessor(EventProcessor processor) {
        # This is totally wrong, should be adding a processor to the processor
        # chain and should be mutex protected.
        __processor = processor;
    }
}

@final class JackImpl @impl Jack {
    @cvars {
        WaveManager __waveMan;
    }
    void start() {
        __waveMan.getClient().transportStart();
        __waveMan.unpause();
    }

    void stop() {
        __waveMan.getClient().transportStop();
        __waveMan.pause();
    }

    int getTransportState(JackPos pos) {
        return __waveMan.getClient().transportQuery(pos);
    }

    void setTime(float secs) {
        __waveMan.seek(int(float(__waveMan.getSampleRate()) * secs));
    }

    float getTime() {
        return float(__waveMan.tell()) / float(__waveMan.getSampleRate());
    }

    bool hasTracks() { return __waveMan.adapters }
}

## Midi engine public interface.
@final class MidiEngine {
    MidiSequencer __mseq;

    oper init(WaveManager waveMan, Sequencer seq) :
        __mseq(JackImpl(waveMan), seq) {
    }

    void start() {
        class MyThread : Thread {
            @cvars {
                MidiSequencer eng;
            }

            void run() {
                eng._run();
            }
        }

        MyThread(__mseq).start();
    }

    void addProcessor(EventProcessor processor) {
        __mseq.addProcessor(processor);
    }

    Port oper .outPort =(Port port) { return __mseq.outPort = port }

    int oper .inputChannel =(int channel) {
        return __mseq.inputChannel = channel;
    }
}

class MidiDispatcher @impl EventProcessor {
    void oper call(MidiSequencer engine, Event event) {
        engine.outPort.send(event);
    }
}
