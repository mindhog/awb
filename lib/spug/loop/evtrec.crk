## The event recorder module.

import crack.cont.array Array;
import crack.cont.treemap TreeMap;
import crack.fs makePath, Path;
import crack.functor Functor2;
import crack.io cerr, Formatter, FStr, StandardFormatter;
import crack.lang Exception, StaticString;
import crack.midi.event ChannelEvent, ControlChange, Event;
import crash parseBlockArg, Block, Builtin, EvalContext, Obj;
import spug.loop.model EventContext;
import spug.loop.jack WaveManager, PCMTrackAdapter;
import types BoolObj, FloatObj, IntObj;
import .engine AWBEngine;
import .plugins PluginInstance, PluginLibrary;
import .plugincmds makeEffectObj;
import .processors Component;

@import ann function;
@import crack.ann cvars, impl;

alias EventProcessor = Functor2[void, Event, EventContext];

@abstract class ControllerProcessor @impl EventProcessor {

    @cvars {
        WaveManager waveMan;
        Formatter out;
    }

    @abstract float oper .value=(float val);

    @abstract float convertControllerValue(int val);

    void oper call(Event event, EventContext ctx) {
        # TODO: only want to see the last of these for a given time position
        out I`forward $(waveMan.tell())\n`;
        value = convertControllerValue(ControlChange.cast(event).value);
    }
}

class Panner : ControllerProcessor {
    PCMTrackAdapter adapter;
    WaveManager waveMan;
    int track;
    oper init(PCMTrackAdapter adapter, WaveManager waveMan,
              Formatter out,
              int track
              ) :
        ControllerProcessor(waveMan, out),
        adapter = adapter,
        track = track {
    }

    float oper .value=(float pan) {
        adapter.setPan(pan);
        out I`pan $track $pan\n`;
        return pan;
    }

    float convertControllerValue(int val) {
        return float(val) / 64.0 - 1.0;
    }
}

class VolumeControl : ControllerProcessor {
    PCMTrackAdapter adapter;
    int track;
    oper init(PCMTrackAdapter adapter, WaveManager waveMan,
              Formatter out,
              int track
              ) :
        ControllerProcessor(waveMan, out),
        adapter = adapter,
        track = track {
    }

    float oper .value=(float vol) {
        cerr `xxx setting volumne of $track to $vol\n`;
        adapter.mixer.volume = vol;
        out `volume $track $(adapter.mixer.volume)\n`;
        return vol;
    }

    float convertControllerValue(int val) {
        return float(val) / 128.0;
    }
}

## Returns the event classname.
@function(Event) String Event_type() {
    return StaticString(self.class.name);
}

## Returns the channel (the event must be a ChannelEvent, specifically one of
## NoteOn, NoteOff, ProgramChange, PitchWheel, or ControlChange).
@function(Event) int Event_channel() {
    return ChannelEvent.cast(self).channel;
}

## Returns the controller (the event must be a ControlChange event).
@function(Event) int Event_controller() {
    return ControlChange.cast(self).controller;
}

## Returns the controller value (the event must be a ControlChange event).
@function(Event) int Event_value() {
    return ControlChange.cast(self).value;
}

Obj wrapEvent(Event event) {
    result := Obj();
    result.define('type', Event_type(event));
    result.define('channel', Event_channel(event));
    result.define('controller', Event_controller(event));
    result.define('value', Event_value(event));
    return result;
}

## An event processor that invokes a crash script.
class ScriptProcessor @impl EventProcessor {
    @cvars {
        EvalContext context;
        Block block;
    }

    void oper call(Event event, EventContext ctx) {
        context.pushFuncFrame();
        try {
            context.define('event', wrapEvent(event));
            block.evaluate(context);
        } catch (Exception ex) {
            cerr `Got exception in event handler script: $ex\n`;
        }
        context.popFuncFrame();
        cerr `terminating from script processor\n`;
    }
}

## SmartController wraps an existing EventProcessor to provide
## smart-synchronization and subscribability.
##
## "Smart-synchronization" is what we're calling the behavior where a current
## controller value is only applied to the parameter that it controls if
## either 1) the last controller value is equal to the current parameter value
## or 2) the current parameter value is between the last controller value and
## the current controller value.  In this way, the user must bring the
## controller to or beyond the level of the parameter value before the two
## become synchronized.
##
## Subscribers are in the form of Functor2[void, int, int] objects, they are
## passed two integers: the current parameter value and the current
## controller value.
class SmartController @impl EventProcessor {

    alias Subscriber = Functor2[void, float, float];

    int __lastController = -1, __param;
    float __paramVal;
    Array[Subscriber] __subscribers = {};
    @cvars {
        ControllerProcessor __rep;
    }

    void __notifySubscribers() {
        for (sub :in __subscribers)
            sub(__paramVal, __rep.convertControllerValue(__lastController));
    }

    void addSubscriber(Subscriber sub) {
        __subscribers.append(sub);
    }

    void removeSubscriber(Subscriber sub) {
        for (iter :on __subscribers) {
            if (iter.elem() is sub) {
                __subscribers.delete(iter.index);
                return;
            }
        }
    }

    float oper .value=(float val) {
        __rep.value = val;
        __notifySubscribers();
        return val;
    }

    void oper call(Event event, EventContext ctx) {
        cur := ControlChange.cast(event).value;

        # Deal with the case where we haven't gotten a controller value yet.
        # In this case, if the current value is close to the parameter value,
        # synchronize them, otherwise just set the last controller value and
        # leave.
        if (__lastController == -1) {
            int abs(int val) { return val >= 0 ? val : -val }
            if (abs(cur - __param) > 3) {
                __lastController = cur;
                __notifySubscribers();
                return;
            } else {
                __lastController = __param;
            }
        }

        if (__lastController == __param ||
            __lastController < __param && cur >= __param ||
            __lastController > __param && cur <= __param
            ) {

            __param = cur;
            __rep(event, ctx);
            __paramVal = __rep.convertControllerValue(cur);
        }
        __notifySubscribers();
        __lastController = cur;
    }
}

## A representation of a project, which is a base directory containing a bunch
## of synchronized wave files and into which an output logfile is written,
## describing all of the mixer events for the project.
class Project {
    AWBEngine engine;
    Path dir;

    ## The output logfile.
    Formatter out;

    ## The next track index.
    int __trackIndex;

    PluginLibrary __plugins = {};

    class Channel {
        @cvars {
            PCMTrackAdapter __adapter;
            SmartController __vol;
            SmartController __pan;
        }

        void setVol(float volume) {
            __vol.value = volume;
        }

        float oper .volume() { return __adapter.mixer.volume }

        void setPan(float pan) {
            __pan.value = pan;
        }

        float oper .pan() { return __adapter.getPan() }

        float oper .gain=(float val) {
            return __adapter.mixer.gain = val;
        }

        float oper .gain() { return __adapter.mixer.gain }

        void enable() { __adapter.enable() }
        void disable() { __adapter.disable() }
        bool enabled() { return __adapter.enabled() }
        void insertComponent(Component component) {
            __adapter.insertComponent(component);
        }
    }

    Array[Channel] __channels = {};

    oper init(AWBEngine engine, String dir) :
        engine = engine,
        dir = makePath(dir) {

        # Rather than blindly overwriting this, we should probably load it in
        # a crash context that nerfs most of the commands except for the
        # "load" commands.
        out = StandardFormatter((this.dir/'logfile.crash').writer());
    }

    void __addChannel(PCMTrackAdapter adapter, int volumeController,
                      int panController
                      ) {
        pan := SmartController(Panner(adapter, engine.getWaveManager(), out,
                                      __trackIndex
                                      )
                               );
        engine.addEventProcessor(panController, pan);
        vol := SmartController(VolumeControl(adapter, engine.getWaveManager(),
                                             out,
                                             __trackIndex
                                             )
                               );
        engine.addEventProcessor(volumeController, vol);
        ++__trackIndex;
        __channels.append(Channel(adapter, vol, pan));
    }

    ## Adds a track given the name of a wave file.
    void addTrack(String filename, int volumeController, int panController) {
        adapter := engine.addWaveFile((dir/filename).getFullName());
        __addChannel(adapter, volumeController, panController);

        # Add the new track to the log.
        out `load $(dir/filename)\n`;
    }

    void addPassThrough(Array[String] inputs, int volumeController,
                        int panController
                        ) {
        adapter := engine.getWaveManager().addPassThrough(inputs);
        __addChannel(adapter, volumeController, panController);
    }

    ## Write 'text' to the logfile.  Note that this does not add a newline,
    ## you'll want to provide that.
    void writeLog(String text) {
        out.write(text);
    }

    ## Set the gain for the channel at the index.
    void setGain(int index, float gain) {
        __channels[index].gain = gain;
        out `gain $index $gain\n`;
    }

    ## Get the gain for the channel at the index.
    float getGain(int index) { return __channels[index].gain }

    ## Set the volume for the channel at the index.
    void setVol(int index, float volume) {
        __channels[index].setVol(volume);
    }

    ## Return the current volume for the channel at the index.
    float getVol(int index) { return __channels[index].volume }

    ## Set the pan for the channel at the index.
    void setPan(int index, float pan) {
        __channels[index].setPan(pan);
    }

    ## Return the current pan for the channel at the index.
    float getPan(int index) { return __channels[index].pan }

    ## Enable or diable the channel.
    void setEnabled(int index, bool enabled) {
        if (enabled)
            __channels[index].enable();
        else
            __channels[index].disable();
    }

    ## Returns true if the channel is enabled.
    bool getEnabled(int index) {
        return __channels[index].enabled();
    }

    PluginInstance insertEffect(int index, String pluginName) {
        plugin := __plugins.getPluginByName(pluginName);
        if (!plugin)
            throw Exception(FStr() `Unknown plugin $(pluginName.getRepr())`);
        # TODO: need to get the rate from somewhere in the system.
        inst := plugin.makeInstance(44100);
        __channels[index].insertComponent(inst);
        out `insertEffect $index '$pluginName'\n`;
        return inst;
    }

    ## Bind an arbitrary controller event to an event processor.
    ## As elsewhere, 'controller' is an integer in which the low-byte is the
    ## controller id and the high-byte is the channel number.
    void bindController(int controller, EventProcessor processor) {
        engine.addEventProcessor(controller, processor);
    }
}

@function(Project) int Project_addTrack(String filename, int panController,
                                        int volumeController
                                        ) {
    self.addTrack(filename, panController, volumeController);
    return 0;
}

alias ObjectArray = Array[Object];

@function(Project) int Project_addPassThrough(ObjectArray inputs,
                                              int panController,
                                              int volumeController
                                              ) {
    realInputs := Array[String]();
    for (input :in inputs)
        realInputs.append(String.cast(input));
    self.addPassThrough(realInputs, panController, volumeController);
    return 0;
}

@function(Project) int Project_setGain(int index, float gain) {
    self.setGain(index, gain);
    return 0;
}

@function(Project) float Project_getGain(int index) {
    return self.getGain(index);
}

@function(Project) int Project_setPan(int index, float pan) {
    self.setPan(index, pan);
    return 0;
}

@function(Project) float Project_getPan(int index) {
    return self.getPan(index);
}

@function(Project) Obj Project_insertEffect(int index, String pluginName) {
    return makeEffectObj(self.insertEffect(index, pluginName));
}

class Project_bindControllerScriptCmd : Builtin {
    @cvars{
        Project proj;
    }

    Object invoke(EvalContext context, Array[Object] args) {
        if (args.count() != 2)
            throw Exception('Accepts exactly two arguments');
        proj.bindController(IntObj.convert(args[0]).val,
                            ScriptProcessor(context, parseBlockArg(args, 1))
                            );
        return IntObj(0);
    }
}

@function(Project) int Project_setVol(int index, float volume) {
    if (volume > 1)
        volume = 1;
    else if (volume < 0)
        volume = 0;
    self.setVol(index, volume);
    return 0;
}

@function(Project) float Project_getVol(int index) {
    return self.getVol(index);
}

@function(Project) int Project_writeLog(String text) {
    self.writeLog(text);
    return 0;
}

@function(Project) int Project_setEnabled(int index, bool enabled) {
    self.setEnabled(index, enabled);
    return 0;
}

@function(Project) bool Project_getEnabled(int index) {
    return self.getEnabled(index);
}

## Return the project directory.
@function(Project) String Project_getDir() {
    return self.dir.getFullName();
}

class EventRecorderModule {
    AWBEngine engine;
    oper init(AWBEngine engine) : engine = engine {}
}

## Create a new EventRecorderModule for crash.  This lets us inject the engine.
Obj makeEventRecorderModule(AWBEngine engine) {
    obj := Obj();
    erm := EventRecorderModule(engine);

    ## Create a new project object in the given directory.
    @function(EventRecorderModule) Obj makeProject(String dir) {
        obj := Obj();
        proj := Project(self.engine, dir);
        obj.define('addTrack', Project_addTrack(proj));
        obj.define('addPassThrough', Project_addPassThrough(proj));
        obj.define('setGain', Project_setGain(proj));
        obj.define('getGain', Project_getGain(proj));
        obj.define('setPan', Project_setPan(proj));
        obj.define('getPan', Project_getPan(proj));
        obj.define('setVol', Project_setVol(proj));
        obj.define('getVol', Project_getVol(proj));
        obj.define('writeLog', Project_writeLog(proj));
        obj.define('insertEffect', Project_insertEffect(proj));
        obj.define('bindControllerScript',
                   Project_bindControllerScriptCmd(proj)
                   );
        obj.define('setEnabled', Project_setEnabled(proj));
        obj.define('getEnabled', Project_getEnabled(proj));
        obj.define('getDir', Project_getDir(proj));
        cerr `makeProject() -> $(obj.vars)\n`;
        return obj;
    }

    cerr `adding a project object\n`;
    obj.define('Project', makeProject(erm));
    return obj;
}
